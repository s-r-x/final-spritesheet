{"version":3,"file":"webworkerAll-BgL4Ryky.js","sources":["../../node_modules/pixi.js/lib/app/ResizePlugin.mjs","../../node_modules/pixi.js/lib/app/TickerPlugin.mjs","../../node_modules/pixi.js/lib/scene/text-bitmap/AbstractBitmapFont.mjs","../../node_modules/pixi.js/lib/scene/text/canvas/utils/getCanvasFillStyle.mjs","../../node_modules/pixi.js/lib/scene/text-bitmap/utils/resolveCharacters.mjs","../../node_modules/pixi.js/lib/scene/text-bitmap/DynamicBitmapFont.mjs","../../node_modules/pixi.js/lib/scene/text-bitmap/utils/getBitmapTextLayout.mjs","../../node_modules/pixi.js/lib/scene/text-bitmap/BitmapFontManager.mjs","../../node_modules/pixi.js/lib/filters/FilterPipe.mjs","../../node_modules/pixi.js/lib/scene/container/bounds/getRenderableBounds.mjs","../../node_modules/pixi.js/lib/filters/FilterSystem.mjs","../../node_modules/pixi.js/lib/scene/mesh/shared/MeshGeometry.mjs","../../node_modules/pixi.js/lib/scene/text-html/utils/textStyleToCSS.mjs","../../node_modules/pixi.js/lib/scene/text-html/HTMLTextStyle.mjs","../../node_modules/pixi.js/lib/scene/text-html/HTMLTextRenderData.mjs","../../node_modules/pixi.js/lib/scene/text-html/utils/measureHtmlText.mjs","../../node_modules/pixi.js/lib/scene/graphics/shared/GraphicsPipe.mjs","../../node_modules/pixi.js/lib/scene/mesh-plane/PlaneGeometry.mjs","../../node_modules/pixi.js/lib/scene/mesh/shared/BatchableMesh.mjs","../../node_modules/pixi.js/lib/scene/mesh/shared/MeshPipe.mjs","../../node_modules/pixi.js/lib/scene/particle-container/gl/GlParticleContainerAdaptor.mjs","../../node_modules/pixi.js/lib/scene/particle-container/gpu/GpuParticleContainerAdaptor.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/utils/createIndicesForQuads.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/utils/generateParticleUpdateFunction.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/ParticleBuffer.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.frag.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.vert.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.wgsl.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/shader/ParticleShader.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/ParticleContainerPipe.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/GlParticleContainerPipe.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/GpuParticleContainerPipe.mjs","../../node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceGeometry.mjs","../../node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceSpritePipe.mjs","../../node_modules/pixi.js/lib/scene/sprite-tiling/shader/tilingBit.mjs","../../node_modules/pixi.js/lib/scene/sprite-tiling/shader/TilingSpriteShader.mjs","../../node_modules/pixi.js/lib/scene/sprite-tiling/utils/QuadGeometry.mjs","../../node_modules/pixi.js/lib/scene/sprite-tiling/utils/setPositions.mjs","../../node_modules/pixi.js/lib/scene/sprite-tiling/utils/applyMatrix.mjs","../../node_modules/pixi.js/lib/scene/sprite-tiling/utils/setUvs.mjs","../../node_modules/pixi.js/lib/scene/sprite-tiling/TilingSpritePipe.mjs","../../node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/localUniformMSDFBit.mjs","../../node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/mSDFBit.mjs","../../node_modules/pixi.js/lib/scene/text/sdfShader/SdfShader.mjs","../../node_modules/pixi.js/lib/scene/text-bitmap/BitmapTextPipe.mjs","../../node_modules/pixi.js/lib/scene/text/utils/updateTextBounds.mjs","../../node_modules/pixi.js/lib/scene/text-html/HTMLTextPipe.mjs","../../node_modules/pixi.js/lib/utils/browser/isSafari.mjs","../../node_modules/pixi.js/lib/scene/text/utils/getPo2TextureFromSource.mjs","../../node_modules/pixi.js/lib/scene/text-html/utils/extractFontFamilies.mjs","../../node_modules/pixi.js/lib/scene/text-html/utils/loadFontAsBase64.mjs","../../node_modules/pixi.js/lib/scene/text-html/utils/loadFontCSS.mjs","../../node_modules/pixi.js/lib/scene/text-html/utils/getFontCss.mjs","../../node_modules/pixi.js/lib/scene/text-html/utils/getSVGUrl.mjs","../../node_modules/pixi.js/lib/scene/text-html/utils/getTemporaryCanvasFromImage.mjs","../../node_modules/pixi.js/lib/scene/text-html/utils/loadSVGImage.mjs","../../node_modules/pixi.js/lib/scene/text-html/HTMLTextSystem.mjs","../../node_modules/pixi.js/lib/scene/text/canvas/CanvasTextPipe.mjs","../../node_modules/pixi.js/lib/utils/canvas/getCanvasBoundingBox.mjs","../../node_modules/pixi.js/lib/scene/text/canvas/CanvasTextSystem.mjs","../../node_modules/pixi.js/lib/app/init.mjs","../../node_modules/pixi.js/lib/scene/graphics/init.mjs","../../node_modules/pixi.js/lib/scene/mesh/init.mjs","../../node_modules/pixi.js/lib/scene/particle-container/init.mjs","../../node_modules/pixi.js/lib/scene/text/init.mjs","../../node_modules/pixi.js/lib/scene/text-bitmap/init.mjs","../../node_modules/pixi.js/lib/scene/text-html/init.mjs","../../node_modules/pixi.js/lib/scene/sprite-tiling/init.mjs","../../node_modules/pixi.js/lib/scene/sprite-nine-slice/init.mjs","../../node_modules/pixi.js/lib/filters/init.mjs"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass ResizePlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    Object.defineProperty(\n      this,\n      \"resizeTo\",\n      /**\n       * The HTML element or window to automatically resize the\n       * renderer's view element to match width and height.\n       * @member {Window|HTMLElement}\n       * @name resizeTo\n       * @memberof app.Application#\n       */\n      {\n        set(dom) {\n          globalThis.removeEventListener(\"resize\", this.queueResize);\n          this._resizeTo = dom;\n          if (dom) {\n            globalThis.addEventListener(\"resize\", this.queueResize);\n            this.resize();\n          }\n        },\n        get() {\n          return this._resizeTo;\n        }\n      }\n    );\n    this.queueResize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      this._resizeId = requestAnimationFrame(() => this.resize());\n    };\n    this._cancelResize = () => {\n      if (this._resizeId) {\n        cancelAnimationFrame(this._resizeId);\n        this._resizeId = null;\n      }\n    };\n    this.resize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      let width;\n      let height;\n      if (this._resizeTo === globalThis.window) {\n        width = globalThis.innerWidth;\n        height = globalThis.innerHeight;\n      } else {\n        const { clientWidth, clientHeight } = this._resizeTo;\n        width = clientWidth;\n        height = clientHeight;\n      }\n      this.renderer.resize(width, height);\n      this.render();\n    };\n    this._resizeId = null;\n    this._resizeTo = null;\n    this.resizeTo = options.resizeTo || null;\n  }\n  /**\n   * Clean up the ticker, scoped to application\n   * @static\n   * @private\n   */\n  static destroy() {\n    globalThis.removeEventListener(\"resize\", this.queueResize);\n    this._cancelResize();\n    this._cancelResize = null;\n    this.queueResize = null;\n    this.resizeTo = null;\n    this.resize = null;\n  }\n}\n/** @ignore */\nResizePlugin.extension = ExtensionType.Application;\n\nexport { ResizePlugin };\n//# sourceMappingURL=ResizePlugin.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { UPDATE_PRIORITY } from '../ticker/const.mjs';\nimport { Ticker } from '../ticker/Ticker.mjs';\n\n\"use strict\";\nclass TickerPlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    options = Object.assign({\n      autoStart: true,\n      sharedTicker: false\n    }, options);\n    Object.defineProperty(\n      this,\n      \"ticker\",\n      {\n        set(ticker) {\n          if (this._ticker) {\n            this._ticker.remove(this.render, this);\n          }\n          this._ticker = ticker;\n          if (ticker) {\n            ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n          }\n        },\n        get() {\n          return this._ticker;\n        }\n      }\n    );\n    this.stop = () => {\n      this._ticker.stop();\n    };\n    this.start = () => {\n      this._ticker.start();\n    };\n    this._ticker = null;\n    this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n    if (options.autoStart) {\n      this.start();\n    }\n  }\n  /**\n   * Clean up the ticker, scoped to application.\n   * @static\n   * @private\n   */\n  static destroy() {\n    if (this._ticker) {\n      const oldTicker = this._ticker;\n      this.ticker = null;\n      oldTicker.destroy();\n    }\n  }\n}\n/** @ignore */\nTickerPlugin.extension = ExtensionType.Application;\n\nexport { TickerPlugin };\n//# sourceMappingURL=TickerPlugin.mjs.map\n","import EventEmitter from 'eventemitter3';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nclass AbstractBitmapFont extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    /** The map of characters by character code. */\n    this.chars = /* @__PURE__ */ Object.create(null);\n    /**\n     * The line-height of the font face in pixels.\n     * @type {number}\n     */\n    this.lineHeight = 0;\n    /**\n     * The name of the font face\n     * @type {string}\n     */\n    this.fontFamily = \"\";\n    /** The metrics of the font face. */\n    this.fontMetrics = { fontSize: 0, ascent: 0, descent: 0 };\n    /**\n     * The offset of the font face from the baseline.\n     * @type {number}\n     */\n    this.baseLineOffset = 0;\n    /** The range and type of the distance field for this font. */\n    this.distanceField = { type: \"none\", range: 0 };\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    this.pages = [];\n    /** should the fill for this font be applied as a tint to the text. */\n    this.applyFillAsTint = true;\n    /** The size of the font face in pixels. */\n    this.baseMeasurementFontSize = 100;\n    this.baseRenderedFontSize = 100;\n  }\n  /**\n   * The name of the font face.\n   * @deprecated since 8.0.0 Use `fontFamily` instead.\n   */\n  get font() {\n    deprecation(v8_0_0, \"BitmapFont.font is deprecated, please use BitmapFont.fontFamily instead.\");\n    return this.fontFamily;\n  }\n  /**\n   * The map of base page textures (i.e., sheets of glyphs).\n   * @deprecated since 8.0.0 Use `pages` instead.\n   */\n  get pageTextures() {\n    deprecation(v8_0_0, \"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.\");\n    return this.pages;\n  }\n  /**\n   * The size of the font face in pixels.\n   * @deprecated since 8.0.0 Use `fontMetrics.fontSize` instead.\n   */\n  get size() {\n    deprecation(v8_0_0, \"BitmapFont.size is deprecated, please use BitmapFont.fontMetrics.fontSize instead.\");\n    return this.fontMetrics.fontSize;\n  }\n  /**\n   * The kind of distance field for this font or \"none\".\n   * @deprecated since 8.0.0 Use `distanceField.type` instead.\n   */\n  get distanceFieldRange() {\n    deprecation(v8_0_0, \"BitmapFont.distanceFieldRange is deprecated, please use BitmapFont.distanceField.range instead.\");\n    return this.distanceField.range;\n  }\n  /**\n   * The range of the distance field in pixels.\n   * @deprecated since 8.0.0 Use `distanceField.range` instead.\n   */\n  get distanceFieldType() {\n    deprecation(v8_0_0, \"BitmapFont.distanceFieldType is deprecated, please use BitmapFont.distanceField.type instead.\");\n    return this.distanceField.type;\n  }\n  destroy(destroyTextures = false) {\n    this.emit(\"destroy\", this);\n    this.removeAllListeners();\n    for (const i in this.chars) {\n      this.chars[i].texture?.destroy();\n    }\n    this.chars = null;\n    if (destroyTextures) {\n      this.pages.forEach((page) => page.texture.destroy(true));\n      this.pages = null;\n    }\n  }\n}\n\nexport { AbstractBitmapFont };\n//# sourceMappingURL=AbstractBitmapFont.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\nimport { FillGradient } from '../../../graphics/shared/fill/FillGradient.mjs';\nimport { FillPattern } from '../../../graphics/shared/fill/FillPattern.mjs';\n\n\"use strict\";\nconst PRECISION = 1e5;\nfunction getCanvasFillStyle(fillStyle, context, textMetrics, padding = 0) {\n  if (fillStyle.texture === Texture.WHITE && !fillStyle.fill) {\n    return Color.shared.setValue(fillStyle.color).setAlpha(fillStyle.alpha ?? 1).toHexa();\n  } else if (!fillStyle.fill) {\n    const pattern = context.createPattern(fillStyle.texture.source.resource, \"repeat\");\n    const tempMatrix = fillStyle.matrix.copyTo(Matrix.shared);\n    tempMatrix.scale(fillStyle.texture.frame.width, fillStyle.texture.frame.height);\n    pattern.setTransform(tempMatrix);\n    return pattern;\n  } else if (fillStyle.fill instanceof FillPattern) {\n    const fillPattern = fillStyle.fill;\n    const pattern = context.createPattern(fillPattern.texture.source.resource, \"repeat\");\n    const tempMatrix = fillPattern.transform.copyTo(Matrix.shared);\n    tempMatrix.scale(\n      fillPattern.texture.frame.width,\n      fillPattern.texture.frame.height\n    );\n    pattern.setTransform(tempMatrix);\n    return pattern;\n  } else if (fillStyle.fill instanceof FillGradient) {\n    const fillGradient = fillStyle.fill;\n    const isLinear = fillGradient.type === \"linear\";\n    const isLocal = fillGradient.textureSpace === \"local\";\n    let width = 1;\n    let height = 1;\n    if (isLocal && textMetrics) {\n      width = textMetrics.width + padding;\n      height = textMetrics.height + padding;\n    }\n    let gradient;\n    let isNearlyVertical = false;\n    if (isLinear) {\n      const { start, end } = fillGradient;\n      gradient = context.createLinearGradient(\n        start.x * width,\n        start.y * height,\n        end.x * width,\n        end.y * height\n      );\n      isNearlyVertical = Math.abs(end.x - start.x) < Math.abs((end.y - start.y) * 0.1);\n    } else {\n      const { center, innerRadius, outerCenter, outerRadius } = fillGradient;\n      gradient = context.createRadialGradient(\n        center.x * width,\n        center.y * height,\n        innerRadius * width,\n        outerCenter.x * width,\n        outerCenter.y * height,\n        outerRadius * width\n      );\n    }\n    if (isNearlyVertical && isLocal && textMetrics) {\n      const ratio = textMetrics.lineHeight / height;\n      for (let i = 0; i < textMetrics.lines.length; i++) {\n        const start = (i * textMetrics.lineHeight + padding / 2) / height;\n        fillGradient.colorStops.forEach((stop) => {\n          const globalStop = start + stop.offset * ratio;\n          gradient.addColorStop(\n            // fix to 5 decimal places to avoid floating point precision issues\n            Math.floor(globalStop * PRECISION) / PRECISION,\n            Color.shared.setValue(stop.color).toHex()\n          );\n        });\n      }\n    } else {\n      fillGradient.colorStops.forEach((stop) => {\n        gradient.addColorStop(stop.offset, Color.shared.setValue(stop.color).toHex());\n      });\n    }\n    return gradient;\n  }\n  warn(\"FillStyle not recognised\", fillStyle);\n  return \"red\";\n}\n\nexport { getCanvasFillStyle };\n//# sourceMappingURL=getCanvasFillStyle.mjs.map\n","\"use strict\";\nfunction resolveCharacters(chars) {\n  if (chars === \"\") {\n    return [];\n  }\n  if (typeof chars === \"string\") {\n    chars = [chars];\n  }\n  const result = [];\n  for (let i = 0, j = chars.length; i < j; i++) {\n    const item = chars[i];\n    if (Array.isArray(item)) {\n      if (item.length !== 2) {\n        throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n      }\n      if (item[0].length === 0 || item[1].length === 0) {\n        throw new Error(\"[BitmapFont]: Invalid character delimiter.\");\n      }\n      const startCode = item[0].charCodeAt(0);\n      const endCode = item[1].charCodeAt(0);\n      if (endCode < startCode) {\n        throw new Error(\"[BitmapFont]: Invalid character range.\");\n      }\n      for (let i2 = startCode, j2 = endCode; i2 <= j2; i2++) {\n        result.push(String.fromCharCode(i2));\n      }\n    } else {\n      result.push(...Array.from(item));\n    }\n  }\n  if (result.length === 0) {\n    throw new Error(\"[BitmapFont]: Empty set when resolving characters.\");\n  }\n  return result;\n}\n\nexport { resolveCharacters };\n//# sourceMappingURL=resolveCharacters.mjs.map\n","import { Color } from '../../color/Color.mjs';\nimport { Rectangle } from '../../maths/shapes/Rectangle.mjs';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { ImageSource } from '../../rendering/renderers/shared/texture/sources/ImageSource.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics.mjs';\nimport { fontStringFromTextStyle } from '../text/canvas/utils/fontStringFromTextStyle.mjs';\nimport { getCanvasFillStyle } from '../text/canvas/utils/getCanvasFillStyle.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { AbstractBitmapFont } from './AbstractBitmapFont.mjs';\nimport { resolveCharacters } from './utils/resolveCharacters.mjs';\n\n\"use strict\";\nconst _DynamicBitmapFont = class _DynamicBitmapFont extends AbstractBitmapFont {\n  /**\n   * @param options - The options for the dynamic bitmap font.\n   */\n  constructor(options) {\n    super();\n    /**\n     * this is a resolution modifier for the font size..\n     * texture resolution will also be used to scale texture according to its font size also\n     */\n    this.resolution = 1;\n    /** The pages of the font. */\n    this.pages = [];\n    this._padding = 0;\n    this._measureCache = /* @__PURE__ */ Object.create(null);\n    this._currentChars = [];\n    this._currentX = 0;\n    this._currentY = 0;\n    this._currentPageIndex = -1;\n    this._skipKerning = false;\n    const dynamicOptions = { ..._DynamicBitmapFont.defaultOptions, ...options };\n    this._textureSize = dynamicOptions.textureSize;\n    this._mipmap = dynamicOptions.mipmap;\n    const style = dynamicOptions.style.clone();\n    if (dynamicOptions.overrideFill) {\n      style._fill.color = 16777215;\n      style._fill.alpha = 1;\n      style._fill.texture = Texture.WHITE;\n      style._fill.fill = null;\n    }\n    this.applyFillAsTint = dynamicOptions.overrideFill;\n    const requestedFontSize = style.fontSize;\n    style.fontSize = this.baseMeasurementFontSize;\n    const font = fontStringFromTextStyle(style);\n    if (dynamicOptions.overrideSize) {\n      if (style._stroke) {\n        style._stroke.width *= this.baseRenderedFontSize / requestedFontSize;\n      }\n    } else {\n      style.fontSize = this.baseRenderedFontSize = requestedFontSize;\n    }\n    this._style = style;\n    this._skipKerning = dynamicOptions.skipKerning ?? false;\n    this.resolution = dynamicOptions.resolution ?? 1;\n    this._padding = dynamicOptions.padding ?? 4;\n    this.fontMetrics = CanvasTextMetrics.measureFont(font);\n    this.lineHeight = style.lineHeight || this.fontMetrics.fontSize || style.fontSize;\n  }\n  ensureCharacters(chars) {\n    const charList = resolveCharacters(chars).filter((char) => !this._currentChars.includes(char)).filter((char, index, self) => self.indexOf(char) === index);\n    if (!charList.length)\n      return;\n    this._currentChars = [...this._currentChars, ...charList];\n    let pageData;\n    if (this._currentPageIndex === -1) {\n      pageData = this._nextPage();\n    } else {\n      pageData = this.pages[this._currentPageIndex];\n    }\n    let { canvas, context } = pageData.canvasAndContext;\n    let textureSource = pageData.texture.source;\n    const style = this._style;\n    let currentX = this._currentX;\n    let currentY = this._currentY;\n    const fontScale = this.baseRenderedFontSize / this.baseMeasurementFontSize;\n    const padding = this._padding * fontScale;\n    let maxCharHeight = 0;\n    let skipTexture = false;\n    const maxTextureWidth = canvas.width / this.resolution;\n    const maxTextureHeight = canvas.height / this.resolution;\n    for (let i = 0; i < charList.length; i++) {\n      const char = charList[i];\n      const metrics = CanvasTextMetrics.measureText(char, style, canvas, false);\n      metrics.lineHeight = metrics.height;\n      const width = metrics.width * fontScale;\n      const textureGlyphWidth = Math.ceil((style.fontStyle === \"italic\" ? 2 : 1) * width);\n      const height = metrics.height * fontScale;\n      const paddedWidth = textureGlyphWidth + padding * 2;\n      const paddedHeight = height + padding * 2;\n      skipTexture = false;\n      if (char !== \"\\n\" && char !== \"\\r\" && char !== \"\t\" && char !== \" \") {\n        skipTexture = true;\n        maxCharHeight = Math.ceil(Math.max(paddedHeight, maxCharHeight));\n      }\n      if (currentX + paddedWidth > maxTextureWidth) {\n        currentY += maxCharHeight;\n        maxCharHeight = paddedHeight;\n        currentX = 0;\n        if (currentY + maxCharHeight > maxTextureHeight) {\n          textureSource.update();\n          const pageData2 = this._nextPage();\n          canvas = pageData2.canvasAndContext.canvas;\n          context = pageData2.canvasAndContext.context;\n          textureSource = pageData2.texture.source;\n          currentY = 0;\n        }\n      }\n      const xAdvance = width / fontScale - (style.dropShadow?.distance ?? 0) - (style._stroke?.width ?? 0);\n      this.chars[char] = {\n        id: char.codePointAt(0),\n        xOffset: -this._padding,\n        yOffset: -this._padding,\n        xAdvance,\n        kerning: {}\n      };\n      if (skipTexture) {\n        this._drawGlyph(\n          context,\n          metrics,\n          currentX + padding,\n          currentY + padding,\n          fontScale,\n          style\n        );\n        const px = textureSource.width * fontScale;\n        const py = textureSource.height * fontScale;\n        const frame = new Rectangle(\n          currentX / px * textureSource.width,\n          currentY / py * textureSource.height,\n          paddedWidth / px * textureSource.width,\n          paddedHeight / py * textureSource.height\n        );\n        this.chars[char].texture = new Texture({\n          source: textureSource,\n          frame\n        });\n        currentX += Math.ceil(paddedWidth);\n      }\n    }\n    textureSource.update();\n    this._currentX = currentX;\n    this._currentY = currentY;\n    this._skipKerning && this._applyKerning(charList, context);\n  }\n  /**\n   * @deprecated since 8.0.0\n   * The map of base page textures (i.e., sheets of glyphs).\n   */\n  get pageTextures() {\n    deprecation(v8_0_0, \"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.\");\n    return this.pages;\n  }\n  _applyKerning(newChars, context) {\n    const measureCache = this._measureCache;\n    for (let i = 0; i < newChars.length; i++) {\n      const first = newChars[i];\n      for (let j = 0; j < this._currentChars.length; j++) {\n        const second = this._currentChars[j];\n        let c1 = measureCache[first];\n        if (!c1)\n          c1 = measureCache[first] = context.measureText(first).width;\n        let c2 = measureCache[second];\n        if (!c2)\n          c2 = measureCache[second] = context.measureText(second).width;\n        let total = context.measureText(first + second).width;\n        let amount = total - (c1 + c2);\n        if (amount) {\n          this.chars[first].kerning[second] = amount;\n        }\n        total = context.measureText(first + second).width;\n        amount = total - (c1 + c2);\n        if (amount) {\n          this.chars[second].kerning[first] = amount;\n        }\n      }\n    }\n  }\n  _nextPage() {\n    this._currentPageIndex++;\n    const textureResolution = this.resolution;\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n      this._textureSize,\n      this._textureSize,\n      textureResolution\n    );\n    this._setupContext(canvasAndContext.context, this._style, textureResolution);\n    const resolution = textureResolution * (this.baseRenderedFontSize / this.baseMeasurementFontSize);\n    const texture = new Texture({\n      source: new ImageSource({\n        resource: canvasAndContext.canvas,\n        resolution,\n        alphaMode: \"premultiply-alpha-on-upload\",\n        autoGenerateMipmaps: this._mipmap\n      })\n    });\n    const pageData = {\n      canvasAndContext,\n      texture\n    };\n    this.pages[this._currentPageIndex] = pageData;\n    return pageData;\n  }\n  // canvas style!\n  _setupContext(context, style, resolution) {\n    style.fontSize = this.baseRenderedFontSize;\n    context.scale(resolution, resolution);\n    context.font = fontStringFromTextStyle(style);\n    style.fontSize = this.baseMeasurementFontSize;\n    context.textBaseline = style.textBaseline;\n    const stroke = style._stroke;\n    const strokeThickness = stroke?.width ?? 0;\n    if (stroke) {\n      context.lineWidth = strokeThickness;\n      context.lineJoin = stroke.join;\n      context.miterLimit = stroke.miterLimit;\n      context.strokeStyle = getCanvasFillStyle(stroke, context);\n    }\n    if (style._fill) {\n      context.fillStyle = getCanvasFillStyle(style._fill, context);\n    }\n    if (style.dropShadow) {\n      const shadowOptions = style.dropShadow;\n      const rgb = Color.shared.setValue(shadowOptions.color).toArray();\n      const dropShadowBlur = shadowOptions.blur * resolution;\n      const dropShadowDistance = shadowOptions.distance * resolution;\n      context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${shadowOptions.alpha})`;\n      context.shadowBlur = dropShadowBlur;\n      context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n      context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance;\n    } else {\n      context.shadowColor = \"black\";\n      context.shadowBlur = 0;\n      context.shadowOffsetX = 0;\n      context.shadowOffsetY = 0;\n    }\n  }\n  _drawGlyph(context, metrics, x, y, fontScale, style) {\n    const char = metrics.text;\n    const fontProperties = metrics.fontProperties;\n    const stroke = style._stroke;\n    const strokeThickness = (stroke?.width ?? 0) * fontScale;\n    const tx = x + strokeThickness / 2;\n    const ty = y - strokeThickness / 2;\n    const descent = fontProperties.descent * fontScale;\n    const lineHeight = metrics.lineHeight * fontScale;\n    if (style.stroke && strokeThickness) {\n      context.strokeText(char, tx, ty + lineHeight - descent);\n    }\n    if (style._fill) {\n      context.fillText(char, tx, ty + lineHeight - descent);\n    }\n  }\n  destroy() {\n    super.destroy();\n    for (let i = 0; i < this.pages.length; i++) {\n      const { canvasAndContext, texture } = this.pages[i];\n      CanvasPool.returnCanvasAndContext(canvasAndContext);\n      texture.destroy(true);\n    }\n    this.pages = null;\n  }\n};\n_DynamicBitmapFont.defaultOptions = {\n  textureSize: 512,\n  style: new TextStyle(),\n  mipmap: true\n};\nlet DynamicBitmapFont = _DynamicBitmapFont;\n\nexport { DynamicBitmapFont };\n//# sourceMappingURL=DynamicBitmapFont.mjs.map\n","\"use strict\";\nfunction getBitmapTextLayout(chars, style, font, trimEnd) {\n  const layoutData = {\n    width: 0,\n    height: 0,\n    offsetY: 0,\n    scale: style.fontSize / font.baseMeasurementFontSize,\n    lines: [{\n      width: 0,\n      charPositions: [],\n      spaceWidth: 0,\n      spacesIndex: [],\n      chars: []\n    }]\n  };\n  layoutData.offsetY = font.baseLineOffset;\n  let currentLine = layoutData.lines[0];\n  let previousChar = null;\n  let firstWord = true;\n  const currentWord = {\n    spaceWord: false,\n    width: 0,\n    start: 0,\n    index: 0,\n    // use index to not modify the array as we use it a lot!\n    positions: [],\n    chars: []\n  };\n  const nextWord = (word) => {\n    const start = currentLine.width;\n    for (let j = 0; j < currentWord.index; j++) {\n      const position = word.positions[j];\n      currentLine.chars.push(word.chars[j]);\n      currentLine.charPositions.push(position + start);\n    }\n    currentLine.width += word.width;\n    firstWord = false;\n    currentWord.width = 0;\n    currentWord.index = 0;\n    currentWord.chars.length = 0;\n  };\n  const nextLine = () => {\n    let index = currentLine.chars.length - 1;\n    if (trimEnd) {\n      let lastChar = currentLine.chars[index];\n      while (lastChar === \" \") {\n        currentLine.width -= font.chars[lastChar].xAdvance;\n        lastChar = currentLine.chars[--index];\n      }\n    }\n    layoutData.width = Math.max(layoutData.width, currentLine.width);\n    currentLine = {\n      width: 0,\n      charPositions: [],\n      chars: [],\n      spaceWidth: 0,\n      spacesIndex: []\n    };\n    firstWord = true;\n    layoutData.lines.push(currentLine);\n    layoutData.height += font.lineHeight;\n  };\n  const scale = font.baseMeasurementFontSize / style.fontSize;\n  const adjustedLetterSpacing = style.letterSpacing * scale;\n  const adjustedWordWrapWidth = style.wordWrapWidth * scale;\n  for (let i = 0; i < chars.length + 1; i++) {\n    let char;\n    const isEnd = i === chars.length;\n    if (!isEnd) {\n      char = chars[i];\n    }\n    const charData = font.chars[char] || font.chars[\" \"];\n    const isSpace = /(?:\\s)/.test(char);\n    const isWordBreak = isSpace || char === \"\\r\" || char === \"\\n\" || isEnd;\n    if (isWordBreak) {\n      const addWordToNextLine = !firstWord && style.wordWrap && currentLine.width + currentWord.width - adjustedLetterSpacing > adjustedWordWrapWidth;\n      if (addWordToNextLine) {\n        nextLine();\n        nextWord(currentWord);\n        if (!isEnd) {\n          currentLine.charPositions.push(0);\n        }\n      } else {\n        currentWord.start = currentLine.width;\n        nextWord(currentWord);\n        if (!isEnd) {\n          currentLine.charPositions.push(0);\n        }\n      }\n      if (char === \"\\r\" || char === \"\\n\") {\n        if (currentLine.width !== 0) {\n          nextLine();\n        }\n      } else if (!isEnd) {\n        const spaceWidth = charData.xAdvance + (charData.kerning[previousChar] || 0) + adjustedLetterSpacing;\n        currentLine.width += spaceWidth;\n        currentLine.spaceWidth = spaceWidth;\n        currentLine.spacesIndex.push(currentLine.charPositions.length);\n        currentLine.chars.push(char);\n      }\n    } else {\n      const kerning = charData.kerning[previousChar] || 0;\n      const nextCharWidth = charData.xAdvance + kerning + adjustedLetterSpacing;\n      currentWord.positions[currentWord.index++] = currentWord.width + kerning;\n      currentWord.chars.push(char);\n      currentWord.width += nextCharWidth;\n    }\n    previousChar = char;\n  }\n  nextLine();\n  if (style.align === \"center\") {\n    alignCenter(layoutData);\n  } else if (style.align === \"right\") {\n    alignRight(layoutData);\n  } else if (style.align === \"justify\") {\n    alignJustify(layoutData);\n  }\n  return layoutData;\n}\nfunction alignCenter(measurementData) {\n  for (let i = 0; i < measurementData.lines.length; i++) {\n    const line = measurementData.lines[i];\n    const offset = measurementData.width / 2 - line.width / 2;\n    for (let j = 0; j < line.charPositions.length; j++) {\n      line.charPositions[j] += offset;\n    }\n  }\n}\nfunction alignRight(measurementData) {\n  for (let i = 0; i < measurementData.lines.length; i++) {\n    const line = measurementData.lines[i];\n    const offset = measurementData.width - line.width;\n    for (let j = 0; j < line.charPositions.length; j++) {\n      line.charPositions[j] += offset;\n    }\n  }\n}\nfunction alignJustify(measurementData) {\n  const width = measurementData.width;\n  for (let i = 0; i < measurementData.lines.length; i++) {\n    const line = measurementData.lines[i];\n    let indy = 0;\n    let spaceIndex = line.spacesIndex[indy++];\n    let offset = 0;\n    const totalSpaces = line.spacesIndex.length;\n    const newSpaceWidth = (width - line.width) / totalSpaces;\n    const spaceWidth = newSpaceWidth;\n    for (let j = 0; j < line.charPositions.length; j++) {\n      if (j === spaceIndex) {\n        spaceIndex = line.spacesIndex[indy++];\n        offset += spaceWidth;\n      }\n      line.charPositions[j] += offset;\n    }\n  }\n}\n\nexport { getBitmapTextLayout };\n//# sourceMappingURL=getBitmapTextLayout.mjs.map\n","import { Cache } from '../../assets/cache/Cache.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { warn } from '../../utils/logging/warn.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { DynamicBitmapFont } from './DynamicBitmapFont.mjs';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout.mjs';\nimport { resolveCharacters } from './utils/resolveCharacters.mjs';\n\n\"use strict\";\nlet fontCount = 0;\nclass BitmapFontManagerClass {\n  constructor() {\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.ALPHA })\n     */\n    this.ALPHA = [[\"a\", \"z\"], [\"A\", \"Z\"], \" \"];\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n     */\n    this.NUMERIC = [[\"0\", \"9\"]];\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @type {string[][]}\n     */\n    this.ALPHANUMERIC = [[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"], \" \"];\n    /**\n     * This character set consists of all the ASCII table.\n     * @member {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    this.ASCII = [[\" \", \"~\"]];\n    /** Default options for installing a new BitmapFont. */\n    this.defaultOptions = {\n      chars: this.ALPHANUMERIC,\n      resolution: 1,\n      padding: 4,\n      skipKerning: false\n    };\n  }\n  /**\n   * Get a font for the specified text and style.\n   * @param text - The text to get the font for\n   * @param style - The style to use\n   */\n  getFont(text, style) {\n    let fontFamilyKey = `${style.fontFamily}-bitmap`;\n    let overrideFill = true;\n    if (style._fill.fill && !style._stroke) {\n      fontFamilyKey += style._fill.fill.styleKey;\n      overrideFill = false;\n    } else if (style._stroke || style.dropShadow) {\n      let key = style.styleKey;\n      key = key.substring(0, key.lastIndexOf(\"-\"));\n      fontFamilyKey = `${key}-bitmap`;\n      overrideFill = false;\n    }\n    if (!Cache.has(fontFamilyKey)) {\n      const fnt = new DynamicBitmapFont({\n        style,\n        overrideFill,\n        overrideSize: true,\n        ...this.defaultOptions\n      });\n      fontCount++;\n      if (fontCount > 50) {\n        warn(\"BitmapText\", `You have dynamically created ${fontCount} bitmap fonts, this can be inefficient. Try pre installing your font styles using \\`BitmapFont.install({name:\"style1\", style})\\``);\n      }\n      fnt.once(\"destroy\", () => {\n        fontCount--;\n        Cache.remove(fontFamilyKey);\n      });\n      Cache.set(\n        fontFamilyKey,\n        fnt\n      );\n    }\n    const dynamicFont = Cache.get(fontFamilyKey);\n    dynamicFont.ensureCharacters?.(text);\n    return dynamicFont;\n  }\n  /**\n   * Get the layout of a text for the specified style.\n   * @param text - The text to get the layout for\n   * @param style - The style to use\n   * @param trimEnd - Whether to ignore whitespaces at the end of each line\n   */\n  getLayout(text, style, trimEnd = true) {\n    const bitmapFont = this.getFont(text, style);\n    return getBitmapTextLayout([...text], style, bitmapFont, trimEnd);\n  }\n  /**\n   * Measure the text using the specified style.\n   * @param text - The text to measure\n   * @param style - The style to use\n   * @param trimEnd - Whether to ignore whitespaces at the end of each line\n   */\n  measureText(text, style, trimEnd = true) {\n    return this.getLayout(text, style, trimEnd);\n  }\n  // eslint-disable-next-line max-len\n  install(...args) {\n    let options = args[0];\n    if (typeof options === \"string\") {\n      options = {\n        name: options,\n        style: args[1],\n        chars: args[2]?.chars,\n        resolution: args[2]?.resolution,\n        padding: args[2]?.padding,\n        skipKerning: args[2]?.skipKerning\n      };\n      deprecation(v8_0_0, \"BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})\");\n    }\n    const name = options?.name;\n    if (!name) {\n      throw new Error(\"[BitmapFontManager] Property `name` is required.\");\n    }\n    options = { ...this.defaultOptions, ...options };\n    const textStyle = options.style;\n    const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n    const overrideFill = style._fill.fill !== null && style._fill.fill !== void 0;\n    const font = new DynamicBitmapFont({\n      style,\n      overrideFill,\n      skipKerning: options.skipKerning,\n      padding: options.padding,\n      resolution: options.resolution,\n      overrideSize: false\n    });\n    const flatChars = resolveCharacters(options.chars);\n    font.ensureCharacters(flatChars.join(\"\"));\n    Cache.set(`${name}-bitmap`, font);\n    font.once(\"destroy\", () => Cache.remove(`${name}-bitmap`));\n    return font;\n  }\n  /**\n   * Uninstalls a bitmap font from the cache.\n   * @param {string} name - The name of the bitmap font to uninstall.\n   */\n  uninstall(name) {\n    const cacheKey = `${name}-bitmap`;\n    const font = Cache.get(cacheKey);\n    if (font) {\n      font.destroy();\n    }\n  }\n}\nconst BitmapFontManager = new BitmapFontManagerClass();\n\nexport { BitmapFontManager };\n//# sourceMappingURL=BitmapFontManager.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass FilterPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  push(filterEffect, container, instructionSet) {\n    const renderPipes = this._renderer.renderPipes;\n    renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      canBundle: false,\n      action: \"pushFilter\",\n      container,\n      filterEffect\n    });\n  }\n  pop(_filterEffect, _container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      action: \"popFilter\",\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    if (instruction.action === \"pushFilter\") {\n      this._renderer.filter.push(instruction);\n    } else if (instruction.action === \"popFilter\") {\n      this._renderer.filter.pop();\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nFilterPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"filter\"\n};\n\nexport { FilterPipe };\n//# sourceMappingURL=FilterPipe.mjs.map\n","\"use strict\";\nfunction getGlobalRenderableBounds(renderables, bounds) {\n  bounds.clear();\n  const tempMatrix = bounds.matrix;\n  for (let i = 0; i < renderables.length; i++) {\n    const renderable = renderables[i];\n    if (renderable.globalDisplayStatus < 7) {\n      continue;\n    }\n    bounds.matrix = renderable.worldTransform;\n    bounds.addBounds(renderable.bounds);\n  }\n  bounds.matrix = tempMatrix;\n  return bounds;\n}\n\nexport { getGlobalRenderableBounds };\n//# sourceMappingURL=getRenderableBounds.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { Matrix } from '../maths/matrix/Matrix.mjs';\nimport { Point } from '../maths/point/Point.mjs';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture.mjs';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../rendering/renderers/types.mjs';\nimport { Bounds } from '../scene/container/bounds/Bounds.mjs';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds.mjs';\nimport { warn } from '../utils/logging/warn.mjs';\n\n\"use strict\";\nconst quadGeometry = new Geometry({\n  attributes: {\n    aPosition: {\n      buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      format: \"float32x2\",\n      stride: 2 * 4,\n      offset: 0\n    }\n  },\n  indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3])\n});\nclass FilterSystem {\n  constructor(renderer) {\n    this._filterStackIndex = 0;\n    this._filterStack = [];\n    this._filterGlobalUniforms = new UniformGroup({\n      uInputSize: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputPixel: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputClamp: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uGlobalFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputTexture: { value: new Float32Array(4), type: \"vec4<f32>\" }\n    });\n    this._globalFilterBindGroup = new BindGroup({});\n    this.renderer = renderer;\n  }\n  /**\n   * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n   * @readonly\n   */\n  get activeBackTexture() {\n    return this._activeFilterData?.backTexture;\n  }\n  push(instruction) {\n    const renderer = this.renderer;\n    const filters = instruction.filterEffect.filters;\n    if (!this._filterStack[this._filterStackIndex]) {\n      this._filterStack[this._filterStackIndex] = this._getFilterData();\n    }\n    const filterData = this._filterStack[this._filterStackIndex];\n    this._filterStackIndex++;\n    if (filters.length === 0) {\n      filterData.skip = true;\n      return;\n    }\n    const bounds = filterData.bounds;\n    if (instruction.renderables) {\n      getGlobalRenderableBounds(instruction.renderables, bounds);\n    } else if (instruction.filterEffect.filterArea) {\n      bounds.clear();\n      bounds.addRect(instruction.filterEffect.filterArea);\n      bounds.applyMatrix(instruction.container.worldTransform);\n    } else {\n      instruction.container.getFastGlobalBounds(true, bounds);\n    }\n    if (instruction.container) {\n      const renderGroup = instruction.container.renderGroup || instruction.container.parentRenderGroup;\n      const filterFrameTransform = renderGroup.cacheToLocalTransform;\n      if (filterFrameTransform) {\n        bounds.applyMatrix(filterFrameTransform);\n      }\n    }\n    const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n    let resolution = Infinity;\n    let padding = 0;\n    let antialias = true;\n    let blendRequired = false;\n    let enabled = false;\n    let clipToViewport = true;\n    for (let i = 0; i < filters.length; i++) {\n      const filter = filters[i];\n      resolution = Math.min(resolution, filter.resolution === \"inherit\" ? colorTextureSource._resolution : filter.resolution);\n      padding += filter.padding;\n      if (filter.antialias === \"off\") {\n        antialias = false;\n      } else if (filter.antialias === \"inherit\") {\n        antialias && (antialias = colorTextureSource.antialias);\n      }\n      if (!filter.clipToViewport) {\n        clipToViewport = false;\n      }\n      const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n      if (!isCompatible) {\n        enabled = false;\n        break;\n      }\n      if (filter.blendRequired && !(renderer.backBuffer?.useBackBuffer ?? true)) {\n        warn(\"Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.\");\n        enabled = false;\n        break;\n      }\n      enabled = filter.enabled || enabled;\n      blendRequired || (blendRequired = filter.blendRequired);\n    }\n    if (!enabled) {\n      filterData.skip = true;\n      return;\n    }\n    if (clipToViewport) {\n      const viewPort = renderer.renderTarget.rootViewPort;\n      const rootResolution = renderer.renderTarget.renderTarget.resolution;\n      bounds.fitBounds(0, viewPort.width / rootResolution, 0, viewPort.height / rootResolution);\n    }\n    bounds.scale(resolution).ceil().scale(1 / resolution).pad(padding | 0);\n    if (!bounds.isPositive) {\n      filterData.skip = true;\n      return;\n    }\n    filterData.skip = false;\n    filterData.bounds = bounds;\n    filterData.blendRequired = blendRequired;\n    filterData.container = instruction.container;\n    filterData.filterEffect = instruction.filterEffect;\n    filterData.previousRenderSurface = renderer.renderTarget.renderSurface;\n    filterData.inputTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      resolution,\n      antialias\n    );\n    renderer.renderTarget.bind(filterData.inputTexture, true);\n    renderer.globalUniforms.push({\n      offset: bounds\n    });\n  }\n  pop() {\n    const renderer = this.renderer;\n    this._filterStackIndex--;\n    const filterData = this._filterStack[this._filterStackIndex];\n    if (filterData.skip) {\n      return;\n    }\n    this._activeFilterData = filterData;\n    const inputTexture = filterData.inputTexture;\n    const bounds = filterData.bounds;\n    let backTexture = Texture.EMPTY;\n    renderer.renderTarget.finishRenderPass();\n    if (filterData.blendRequired) {\n      const previousBounds = this._filterStackIndex > 0 ? this._filterStack[this._filterStackIndex - 1].bounds : null;\n      const renderTarget = renderer.renderTarget.getRenderTarget(filterData.previousRenderSurface);\n      backTexture = this.getBackTexture(renderTarget, bounds, previousBounds);\n    }\n    filterData.backTexture = backTexture;\n    const filters = filterData.filterEffect.filters;\n    this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n    this._globalFilterBindGroup.setResource(backTexture.source, 3);\n    renderer.globalUniforms.pop();\n    if (filters.length === 1) {\n      filters[0].apply(this, inputTexture, filterData.previousRenderSurface, false);\n      TexturePool.returnTexture(inputTexture);\n    } else {\n      let flip = filterData.inputTexture;\n      let flop = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        flip.source._resolution,\n        false\n      );\n      let i = 0;\n      for (i = 0; i < filters.length - 1; ++i) {\n        const filter = filters[i];\n        filter.apply(this, flip, flop, true);\n        const t = flip;\n        flip = flop;\n        flop = t;\n      }\n      filters[i].apply(this, flip, filterData.previousRenderSurface, false);\n      TexturePool.returnTexture(flip);\n      TexturePool.returnTexture(flop);\n    }\n    if (filterData.blendRequired) {\n      TexturePool.returnTexture(backTexture);\n    }\n  }\n  getBackTexture(lastRenderSurface, bounds, previousBounds) {\n    const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n    const backTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      backgroundResolution,\n      false\n    );\n    let x = bounds.minX;\n    let y = bounds.minY;\n    if (previousBounds) {\n      x -= previousBounds.minX;\n      y -= previousBounds.minY;\n    }\n    x = Math.floor(x * backgroundResolution);\n    y = Math.floor(y * backgroundResolution);\n    const width = Math.ceil(bounds.width * backgroundResolution);\n    const height = Math.ceil(bounds.height * backgroundResolution);\n    this.renderer.renderTarget.copyToTexture(\n      lastRenderSurface,\n      backTexture,\n      { x, y },\n      { width, height },\n      { x: 0, y: 0 }\n    );\n    return backTexture;\n  }\n  applyFilter(filter, input, output, clear) {\n    const renderer = this.renderer;\n    const filterData = this._filterStack[this._filterStackIndex];\n    const bounds = filterData.bounds;\n    const offset = Point.shared;\n    const previousRenderSurface = filterData.previousRenderSurface;\n    const isFinalTarget = previousRenderSurface === output;\n    let resolution = this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n    let currentIndex = this._filterStackIndex - 1;\n    while (currentIndex > 0 && this._filterStack[currentIndex].skip) {\n      --currentIndex;\n    }\n    if (currentIndex > 0) {\n      resolution = this._filterStack[currentIndex].inputTexture.source._resolution;\n    }\n    const filterUniforms = this._filterGlobalUniforms;\n    const uniforms = filterUniforms.uniforms;\n    const outputFrame = uniforms.uOutputFrame;\n    const inputSize = uniforms.uInputSize;\n    const inputPixel = uniforms.uInputPixel;\n    const inputClamp = uniforms.uInputClamp;\n    const globalFrame = uniforms.uGlobalFrame;\n    const outputTexture = uniforms.uOutputTexture;\n    if (isFinalTarget) {\n      let lastIndex = this._filterStackIndex;\n      while (lastIndex > 0) {\n        lastIndex--;\n        const filterData2 = this._filterStack[this._filterStackIndex - 1];\n        if (!filterData2.skip) {\n          offset.x = filterData2.bounds.minX;\n          offset.y = filterData2.bounds.minY;\n          break;\n        }\n      }\n      outputFrame[0] = bounds.minX - offset.x;\n      outputFrame[1] = bounds.minY - offset.y;\n    } else {\n      outputFrame[0] = 0;\n      outputFrame[1] = 0;\n    }\n    outputFrame[2] = input.frame.width;\n    outputFrame[3] = input.frame.height;\n    inputSize[0] = input.source.width;\n    inputSize[1] = input.source.height;\n    inputSize[2] = 1 / inputSize[0];\n    inputSize[3] = 1 / inputSize[1];\n    inputPixel[0] = input.source.pixelWidth;\n    inputPixel[1] = input.source.pixelHeight;\n    inputPixel[2] = 1 / inputPixel[0];\n    inputPixel[3] = 1 / inputPixel[1];\n    inputClamp[0] = 0.5 * inputPixel[2];\n    inputClamp[1] = 0.5 * inputPixel[3];\n    inputClamp[2] = input.frame.width * inputSize[2] - 0.5 * inputPixel[2];\n    inputClamp[3] = input.frame.height * inputSize[3] - 0.5 * inputPixel[3];\n    const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n    globalFrame[0] = offset.x * resolution;\n    globalFrame[1] = offset.y * resolution;\n    globalFrame[2] = rootTexture.source.width * resolution;\n    globalFrame[3] = rootTexture.source.height * resolution;\n    const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n    renderer.renderTarget.bind(output, !!clear);\n    if (output instanceof Texture) {\n      outputTexture[0] = output.frame.width;\n      outputTexture[1] = output.frame.height;\n    } else {\n      outputTexture[0] = renderTarget.width;\n      outputTexture[1] = renderTarget.height;\n    }\n    outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n    filterUniforms.update();\n    if (renderer.renderPipes.uniformBatch) {\n      const batchUniforms = renderer.renderPipes.uniformBatch.getUboResource(filterUniforms);\n      this._globalFilterBindGroup.setResource(batchUniforms, 0);\n    } else {\n      this._globalFilterBindGroup.setResource(filterUniforms, 0);\n    }\n    this._globalFilterBindGroup.setResource(input.source, 1);\n    this._globalFilterBindGroup.setResource(input.source.style, 2);\n    filter.groups[0] = this._globalFilterBindGroup;\n    renderer.encoder.draw({\n      geometry: quadGeometry,\n      shader: filter,\n      state: filter._state,\n      topology: \"triangle-list\"\n    });\n    if (renderer.type === RendererType.WEBGL) {\n      renderer.renderTarget.finishRenderPass();\n    }\n  }\n  _getFilterData() {\n    return {\n      skip: false,\n      inputTexture: null,\n      bounds: new Bounds(),\n      container: null,\n      filterEffect: null,\n      blendRequired: false,\n      previousRenderSurface: null\n    };\n  }\n  /**\n   * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n   *\n   * Use `outputMatrix * vTextureCoord` in the shader.\n   * @param outputMatrix - The matrix to output to.\n   * @param {Sprite} sprite - The sprite to map to.\n   * @returns The mapped matrix.\n   */\n  calculateSpriteMatrix(outputMatrix, sprite) {\n    const data = this._activeFilterData;\n    const mappedMatrix = outputMatrix.set(\n      data.inputTexture._source.width,\n      0,\n      0,\n      data.inputTexture._source.height,\n      data.bounds.minX,\n      data.bounds.minY\n    );\n    const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n    const renderGroup = sprite.renderGroup || sprite.parentRenderGroup;\n    if (renderGroup && renderGroup.cacheToLocalTransform) {\n      worldTransform.prepend(renderGroup.cacheToLocalTransform);\n    }\n    worldTransform.invert();\n    mappedMatrix.prepend(worldTransform);\n    mappedMatrix.scale(\n      1 / sprite.texture.frame.width,\n      1 / sprite.texture.frame.height\n    );\n    mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n    return mappedMatrix;\n  }\n}\n/** @ignore */\nFilterSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"filter\"\n};\n\nexport { FilterSystem };\n//# sourceMappingURL=FilterSystem.mjs.map\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nconst _MeshGeometry = class _MeshGeometry extends Geometry {\n  constructor(...args) {\n    let options = args[0] ?? {};\n    if (options instanceof Float32Array) {\n      deprecation(v8_0_0, \"use new MeshGeometry({ positions, uvs, indices }) instead\");\n      options = {\n        positions: options,\n        uvs: args[1],\n        indices: args[2]\n      };\n    }\n    options = { ..._MeshGeometry.defaultOptions, ...options };\n    const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    let uvs = options.uvs;\n    if (!uvs) {\n      if (options.positions) {\n        uvs = new Float32Array(positions.length);\n      } else {\n        uvs = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n      }\n    }\n    const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n    const shrinkToFit = options.shrinkBuffersToFit;\n    const positionBuffer = new Buffer({\n      data: positions,\n      label: \"attribute-mesh-positions\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const uvBuffer = new Buffer({\n      data: uvs,\n      label: \"attribute-mesh-uvs\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const indexBuffer = new Buffer({\n      data: indices,\n      label: \"index-mesh-buffer\",\n      shrinkToFit,\n      usage: BufferUsage.INDEX | BufferUsage.COPY_DST\n    });\n    super({\n      attributes: {\n        aPosition: {\n          buffer: positionBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        },\n        aUV: {\n          buffer: uvBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        }\n      },\n      indexBuffer,\n      topology: options.topology\n    });\n    this.batchMode = \"auto\";\n  }\n  /** The positions of the mesh. */\n  get positions() {\n    return this.attributes.aPosition.buffer.data;\n  }\n  /**\n   * Set the positions of the mesh.\n   * When setting the positions, its important that the uvs array is at least as long as the positions array.\n   * otherwise the geometry will not be valid.\n   * @param {Float32Array} value - The positions of the mesh.\n   */\n  set positions(value) {\n    this.attributes.aPosition.buffer.data = value;\n  }\n  /** The UVs of the mesh. */\n  get uvs() {\n    return this.attributes.aUV.buffer.data;\n  }\n  /**\n   * Set the UVs of the mesh.\n   * Its important that the uvs array you set is at least as long as the positions array.\n   * otherwise the geometry will not be valid.\n   * @param {Float32Array} value - The UVs of the mesh.\n   */\n  set uvs(value) {\n    this.attributes.aUV.buffer.data = value;\n  }\n  /** The indices of the mesh. */\n  get indices() {\n    return this.indexBuffer.data;\n  }\n  set indices(value) {\n    this.indexBuffer.data = value;\n  }\n};\n_MeshGeometry.defaultOptions = {\n  topology: \"triangle-list\",\n  shrinkBuffersToFit: false\n};\nlet MeshGeometry = _MeshGeometry;\n\nexport { MeshGeometry };\n//# sourceMappingURL=MeshGeometry.mjs.map\n","import { Color } from '../../../color/Color.mjs';\n\n\"use strict\";\nfunction textStyleToCSS(style) {\n  const stroke = style._stroke;\n  const fill = style._fill;\n  const cssStyleString = [\n    `color: ${Color.shared.setValue(fill.color).toHex()}`,\n    `font-size: ${style.fontSize}px`,\n    `font-family: ${style.fontFamily}`,\n    `font-weight: ${style.fontWeight}`,\n    `font-style: ${style.fontStyle}`,\n    `font-variant: ${style.fontVariant}`,\n    `letter-spacing: ${style.letterSpacing}px`,\n    `text-align: ${style.align}`,\n    `padding: ${style.padding}px`,\n    `white-space: ${style.whiteSpace === \"pre\" && style.wordWrap ? \"pre-wrap\" : style.whiteSpace}`,\n    ...style.lineHeight ? [`line-height: ${style.lineHeight}px`] : [],\n    ...style.wordWrap ? [\n      `word-wrap: ${style.breakWords ? \"break-all\" : \"break-word\"}`,\n      `max-width: ${style.wordWrapWidth}px`\n    ] : [],\n    ...stroke ? [strokeToCSS(stroke)] : [],\n    ...style.dropShadow ? [dropShadowToCSS(style.dropShadow)] : [],\n    ...style.cssOverrides\n  ].join(\";\");\n  const cssStyles = [`div { ${cssStyleString} }`];\n  tagStyleToCSS(style.tagStyles, cssStyles);\n  return cssStyles.join(\" \");\n}\nfunction dropShadowToCSS(dropShadowStyle) {\n  const color = Color.shared.setValue(dropShadowStyle.color).setAlpha(dropShadowStyle.alpha).toHexa();\n  const x = Math.round(Math.cos(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const y = Math.round(Math.sin(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const position = `${x}px ${y}px`;\n  if (dropShadowStyle.blur > 0) {\n    return `text-shadow: ${position} ${dropShadowStyle.blur}px ${color}`;\n  }\n  return `text-shadow: ${position} ${color}`;\n}\nfunction strokeToCSS(stroke) {\n  return [\n    `-webkit-text-stroke-width: ${stroke.width}px`,\n    `-webkit-text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n    `text-stroke-width: ${stroke.width}px`,\n    `text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n    \"paint-order: stroke\"\n  ].join(\";\");\n}\nconst templates = {\n  fontSize: `font-size: {{VALUE}}px`,\n  fontFamily: `font-family: {{VALUE}}`,\n  fontWeight: `font-weight: {{VALUE}}`,\n  fontStyle: `font-style: {{VALUE}}`,\n  fontVariant: `font-variant: {{VALUE}}`,\n  letterSpacing: `letter-spacing: {{VALUE}}px`,\n  align: `text-align: {{VALUE}}`,\n  padding: `padding: {{VALUE}}px`,\n  whiteSpace: `white-space: {{VALUE}}`,\n  lineHeight: `line-height: {{VALUE}}px`,\n  wordWrapWidth: `max-width: {{VALUE}}px`\n};\nconst transform = {\n  fill: (value) => `color: ${Color.shared.setValue(value).toHex()}`,\n  breakWords: (value) => `word-wrap: ${value ? \"break-all\" : \"break-word\"}`,\n  stroke: strokeToCSS,\n  dropShadow: dropShadowToCSS\n};\nfunction tagStyleToCSS(tagStyles, out) {\n  for (const i in tagStyles) {\n    const tagStyle = tagStyles[i];\n    const cssTagStyle = [];\n    for (const j in tagStyle) {\n      if (transform[j]) {\n        cssTagStyle.push(transform[j](tagStyle[j]));\n      } else if (templates[j]) {\n        cssTagStyle.push(templates[j].replace(\"{{VALUE}}\", tagStyle[j]));\n      }\n    }\n    out.push(`${i} { ${cssTagStyle.join(\";\")} }`);\n  }\n}\n\nexport { textStyleToCSS };\n//# sourceMappingURL=textStyleToCSS.mjs.map\n","import { warn } from '../../utils/logging/warn.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { generateTextStyleKey } from '../text/utils/generateTextStyleKey.mjs';\nimport { textStyleToCSS } from './utils/textStyleToCSS.mjs';\n\n\"use strict\";\nclass HTMLTextStyle extends TextStyle {\n  constructor(options = {}) {\n    super(options);\n    this._cssOverrides = [];\n    this.cssOverrides ?? (this.cssOverrides = options.cssOverrides);\n    this.tagStyles = options.tagStyles ?? {};\n  }\n  /** List of style overrides that will be applied to the HTML text. */\n  set cssOverrides(value) {\n    this._cssOverrides = value instanceof Array ? value : [value];\n    this.update();\n  }\n  get cssOverrides() {\n    return this._cssOverrides;\n  }\n  _generateKey() {\n    this._styleKey = generateTextStyleKey(this) + this._cssOverrides.join(\"-\");\n    return this._styleKey;\n  }\n  update() {\n    this._cssStyle = null;\n    super.update();\n  }\n  /**\n   * Creates a new HTMLTextStyle object with the same values as this one.\n   * @returns New cloned HTMLTextStyle object\n   */\n  clone() {\n    return new HTMLTextStyle({\n      align: this.align,\n      breakWords: this.breakWords,\n      dropShadow: this.dropShadow ? { ...this.dropShadow } : null,\n      fill: this._fill,\n      fontFamily: this.fontFamily,\n      fontSize: this.fontSize,\n      fontStyle: this.fontStyle,\n      fontVariant: this.fontVariant,\n      fontWeight: this.fontWeight,\n      letterSpacing: this.letterSpacing,\n      lineHeight: this.lineHeight,\n      padding: this.padding,\n      stroke: this._stroke,\n      whiteSpace: this.whiteSpace,\n      wordWrap: this.wordWrap,\n      wordWrapWidth: this.wordWrapWidth,\n      cssOverrides: this.cssOverrides\n    });\n  }\n  get cssStyle() {\n    if (!this._cssStyle) {\n      this._cssStyle = textStyleToCSS(this);\n    }\n    return this._cssStyle;\n  }\n  /**\n   * Add a style override, this can be any CSS property\n   * it will override any built-in style. This is the\n   * property and the value as a string (e.g., `color: red`).\n   * This will override any other internal style.\n   * @param {string} value - CSS style(s) to add.\n   * @example\n   * style.addOverride('background-color: red');\n   */\n  addOverride(...value) {\n    const toAdd = value.filter((v) => !this.cssOverrides.includes(v));\n    if (toAdd.length > 0) {\n      this.cssOverrides.push(...toAdd);\n      this.update();\n    }\n  }\n  /**\n   * Remove any overrides that match the value.\n   * @param {string} value - CSS style to remove.\n   * @example\n   * style.removeOverride('background-color: red');\n   */\n  removeOverride(...value) {\n    const toRemove = value.filter((v) => this.cssOverrides.includes(v));\n    if (toRemove.length > 0) {\n      this.cssOverrides = this.cssOverrides.filter((v) => !toRemove.includes(v));\n      this.update();\n    }\n  }\n  set fill(value) {\n    if (typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color fill is not supported by HTMLText\");\n    }\n    super.fill = value;\n  }\n  set stroke(value) {\n    if (value && typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color stroke is not supported by HTMLText\");\n    }\n    super.stroke = value;\n  }\n}\n\nexport { HTMLTextStyle };\n//# sourceMappingURL=HTMLTextStyle.mjs.map\n","\"use strict\";\nconst nssvg = \"http://www.w3.org/2000/svg\";\nconst nsxhtml = \"http://www.w3.org/1999/xhtml\";\nclass HTMLTextRenderData {\n  constructor() {\n    this.svgRoot = document.createElementNS(nssvg, \"svg\");\n    this.foreignObject = document.createElementNS(nssvg, \"foreignObject\");\n    this.domElement = document.createElementNS(nsxhtml, \"div\");\n    this.styleElement = document.createElementNS(nsxhtml, \"style\");\n    this.image = new Image();\n    const { foreignObject, svgRoot, styleElement, domElement } = this;\n    foreignObject.setAttribute(\"width\", \"10000\");\n    foreignObject.setAttribute(\"height\", \"10000\");\n    foreignObject.style.overflow = \"hidden\";\n    svgRoot.appendChild(foreignObject);\n    foreignObject.appendChild(styleElement);\n    foreignObject.appendChild(domElement);\n  }\n}\n\nexport { HTMLTextRenderData, nssvg, nsxhtml };\n//# sourceMappingURL=HTMLTextRenderData.mjs.map\n","import { HTMLTextRenderData } from '../HTMLTextRenderData.mjs';\n\n\"use strict\";\nlet tempHTMLTextRenderData;\nfunction measureHtmlText(text, style, fontStyleCSS, htmlTextRenderData) {\n  htmlTextRenderData || (htmlTextRenderData = tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData()));\n  const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n  domElement.innerHTML = `<style>${style.cssStyle};</style><div style='padding:0'>${text}</div>`;\n  domElement.setAttribute(\"style\", \"transform-origin: top left; display: inline-block\");\n  if (fontStyleCSS) {\n    styleElement.textContent = fontStyleCSS;\n  }\n  document.body.appendChild(svgRoot);\n  const contentBounds = domElement.getBoundingClientRect();\n  svgRoot.remove();\n  const doublePadding = style.padding * 2;\n  return {\n    width: contentBounds.width - doublePadding,\n    height: contentBounds.height - doublePadding\n  };\n}\n\nexport { measureHtmlText };\n//# sourceMappingURL=measureHtmlText.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../gpu/colorToUniform.mjs';\nimport { BatchableGraphics } from './BatchableGraphics.mjs';\n\n\"use strict\";\nclass GraphicsPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    // batchable graphics list, used to render batches\n    this._graphicsBatchesHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n    this.renderer.renderableGC.addManagedHash(this, \"_graphicsBatchesHash\");\n  }\n  validateRenderable(graphics) {\n    const context = graphics.context;\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n    if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(graphics, instructionSet) {\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (graphics.didViewUpdate) {\n      this._rebuild(graphics);\n    }\n    if (gpuContext.isBatchable) {\n      this._addToBatcher(graphics, instructionSet);\n    } else {\n      this.renderer.renderPipes.batch.break(instructionSet);\n      instructionSet.add(graphics);\n    }\n  }\n  updateRenderable(graphics) {\n    const batches = this._graphicsBatchesHash[graphics.uid];\n    if (batches) {\n      for (let i = 0; i < batches.length; i++) {\n        const batch = batches[i];\n        batch._batcher.updateElement(batch);\n      }\n    }\n  }\n  destroyRenderable(graphics) {\n    if (this._graphicsBatchesHash[graphics.uid]) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n    graphics.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(graphics) {\n    if (!graphics.isRenderable)\n      return;\n    const renderer = this.renderer;\n    const context = graphics.context;\n    const contextSystem = renderer.graphicsContext;\n    if (!contextSystem.getGpuContext(context).batches.length) {\n      return;\n    }\n    const shader = context.customShader || this._adaptor.shader;\n    this.state.blendMode = graphics.groupBlendMode;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = graphics.groupTransform;\n    localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n    color32BitToUniform(\n      graphics.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, graphics);\n  }\n  _rebuild(graphics) {\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (wasBatched) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n    if (gpuContext.isBatchable) {\n      this._initBatchesForRenderable(graphics);\n    }\n    graphics.batched = gpuContext.isBatchable;\n  }\n  _addToBatcher(graphics, instructionSet) {\n    const batchPipe = this.renderer.renderPipes.batch;\n    const batches = this._getBatchesForRenderable(graphics);\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      batchPipe.addToBatch(batch, instructionSet);\n    }\n  }\n  _getBatchesForRenderable(graphics) {\n    return this._graphicsBatchesHash[graphics.uid] || this._initBatchesForRenderable(graphics);\n  }\n  _initBatchesForRenderable(graphics) {\n    const context = graphics.context;\n    const gpuContext = this.renderer.graphicsContext.getGpuContext(context);\n    const roundPixels = this.renderer._roundPixels | graphics._roundPixels;\n    const batches = gpuContext.batches.map((batch) => {\n      const batchClone = BigPool.get(BatchableGraphics);\n      batch.copyTo(batchClone);\n      batchClone.renderable = graphics;\n      batchClone.roundPixels = roundPixels;\n      return batchClone;\n    });\n    if (this._graphicsBatchesHash[graphics.uid] === void 0) {\n      graphics.on(\"destroyed\", this._destroyRenderableBound);\n    }\n    this._graphicsBatchesHash[graphics.uid] = batches;\n    return batches;\n  }\n  _removeBatchForRenderable(graphicsUid) {\n    this._graphicsBatchesHash[graphicsUid].forEach((batch) => {\n      BigPool.return(batch);\n    });\n    this._graphicsBatchesHash[graphicsUid] = null;\n  }\n  destroy() {\n    this.renderer = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.state = null;\n    for (const i in this._graphicsBatchesHash) {\n      this._removeBatchForRenderable(i);\n    }\n    this._graphicsBatchesHash = null;\n  }\n}\n/** @ignore */\nGraphicsPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"graphics\"\n};\n\nexport { GraphicsPipe };\n//# sourceMappingURL=GraphicsPipe.mjs.map\n","import { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nconst _PlaneGeometry = class _PlaneGeometry extends MeshGeometry {\n  constructor(...args) {\n    super({});\n    let options = args[0] ?? {};\n    if (typeof options === \"number\") {\n      deprecation(v8_0_0, \"PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead\");\n      options = {\n        width: options,\n        height: args[1],\n        verticesX: args[2],\n        verticesY: args[3]\n      };\n    }\n    this.build(options);\n  }\n  /**\n   * Refreshes plane coordinates\n   * @param options - Options to be applied to plane geometry\n   */\n  build(options) {\n    options = { ..._PlaneGeometry.defaultOptions, ...options };\n    this.verticesX = this.verticesX ?? options.verticesX;\n    this.verticesY = this.verticesY ?? options.verticesY;\n    this.width = this.width ?? options.width;\n    this.height = this.height ?? options.height;\n    const total = this.verticesX * this.verticesY;\n    const verts = [];\n    const uvs = [];\n    const indices = [];\n    const verticesX = this.verticesX - 1;\n    const verticesY = this.verticesY - 1;\n    const sizeX = this.width / verticesX;\n    const sizeY = this.height / verticesY;\n    for (let i = 0; i < total; i++) {\n      const x = i % this.verticesX;\n      const y = i / this.verticesX | 0;\n      verts.push(x * sizeX, y * sizeY);\n      uvs.push(x / verticesX, y / verticesY);\n    }\n    const totalSub = verticesX * verticesY;\n    for (let i = 0; i < totalSub; i++) {\n      const xpos = i % verticesX;\n      const ypos = i / verticesX | 0;\n      const value = ypos * this.verticesX + xpos;\n      const value2 = ypos * this.verticesX + xpos + 1;\n      const value3 = (ypos + 1) * this.verticesX + xpos;\n      const value4 = (ypos + 1) * this.verticesX + xpos + 1;\n      indices.push(\n        value,\n        value2,\n        value3,\n        value2,\n        value4,\n        value3\n      );\n    }\n    this.buffers[0].data = new Float32Array(verts);\n    this.buffers[1].data = new Float32Array(uvs);\n    this.indexBuffer.data = new Uint32Array(indices);\n    this.buffers[0].update();\n    this.buffers[1].update();\n    this.indexBuffer.update();\n  }\n};\n_PlaneGeometry.defaultOptions = {\n  width: 100,\n  height: 100,\n  verticesX: 10,\n  verticesY: 10\n};\nlet PlaneGeometry = _PlaneGeometry;\n\nexport { PlaneGeometry };\n//# sourceMappingURL=PlaneGeometry.mjs.map\n","\"use strict\";\nclass BatchableMesh {\n  constructor() {\n    this.batcherName = \"default\";\n    this.packAsQuad = false;\n    this.indexOffset = 0;\n    this.attributeOffset = 0;\n    this.roundPixels = 0;\n    this._batcher = null;\n    this._batch = null;\n    this._textureMatrixUpdateId = -1;\n    this._uvUpdateId = -1;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  get topology() {\n    return this._topology || this.geometry.topology;\n  }\n  set topology(value) {\n    this._topology = value;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this._batcher = null;\n    this._batch = null;\n    this.geometry = null;\n    this._uvUpdateId = -1;\n    this._textureMatrixUpdateId = -1;\n  }\n  /**\n   * Sets the texture for the batchable mesh.\n   * As it does so, it resets the texture matrix update ID.\n   * this is to ensure that the texture matrix is recalculated when the uvs are referenced\n   * @param value - The texture to set.\n   */\n  setTexture(value) {\n    if (this.texture === value)\n      return;\n    this.texture = value;\n    this._textureMatrixUpdateId = -1;\n  }\n  get uvs() {\n    const geometry = this.geometry;\n    const uvBuffer = geometry.getBuffer(\"aUV\");\n    const uvs = uvBuffer.data;\n    let transformedUvs = uvs;\n    const textureMatrix = this.texture.textureMatrix;\n    if (!textureMatrix.isSimple) {\n      transformedUvs = this._transformedUvs;\n      if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID) {\n        if (!transformedUvs || transformedUvs.length < uvs.length) {\n          transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n        }\n        this._textureMatrixUpdateId = textureMatrix._updateID;\n        this._uvUpdateId = uvBuffer._updateID;\n        textureMatrix.multiplyUvs(uvs, transformedUvs);\n      }\n    }\n    return transformedUvs;\n  }\n  get positions() {\n    return this.geometry.positions;\n  }\n  get indices() {\n    return this.geometry.indices;\n  }\n  get color() {\n    return this.renderable.groupColorAlpha;\n  }\n  get groupTransform() {\n    return this.renderable.groupTransform;\n  }\n  get attributeSize() {\n    return this.geometry.positions.length / 2;\n  }\n  get indexSize() {\n    return this.geometry.indices.length;\n  }\n}\n\nexport { BatchableMesh };\n//# sourceMappingURL=BatchableMesh.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from './BatchableMesh.mjs';\n\n\"use strict\";\nclass MeshPipe {\n  constructor(renderer, adaptor) {\n    this.localUniforms = new UniformGroup({\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    this.localUniformsBindGroup = new BindGroup({\n      0: this.localUniforms\n    });\n    this._meshDataHash = /* @__PURE__ */ Object.create(null);\n    this._gpuBatchableMeshHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n    renderer.renderableGC.addManagedHash(this, \"_gpuBatchableMeshHash\");\n    renderer.renderableGC.addManagedHash(this, \"_meshDataHash\");\n  }\n  validateRenderable(mesh) {\n    const meshData = this._getMeshData(mesh);\n    const wasBatched = meshData.batched;\n    const isBatched = mesh.batched;\n    meshData.batched = isBatched;\n    if (wasBatched !== isBatched) {\n      return true;\n    } else if (isBatched) {\n      const geometry = mesh._geometry;\n      if (geometry.indices.length !== meshData.indexSize || geometry.positions.length !== meshData.vertexSize) {\n        meshData.indexSize = geometry.indices.length;\n        meshData.vertexSize = geometry.positions.length;\n        return true;\n      }\n      const batchableMesh = this._getBatchableMesh(mesh);\n      if (batchableMesh.texture.uid !== mesh._texture.uid) {\n        batchableMesh._textureMatrixUpdateId = -1;\n      }\n      return !batchableMesh._batcher.checkAndUpdateTexture(\n        batchableMesh,\n        mesh._texture\n      );\n    }\n    return false;\n  }\n  addRenderable(mesh, instructionSet) {\n    const batcher = this.renderer.renderPipes.batch;\n    const { batched } = this._getMeshData(mesh);\n    if (batched) {\n      const gpuBatchableMesh = this._getBatchableMesh(mesh);\n      gpuBatchableMesh.setTexture(mesh._texture);\n      gpuBatchableMesh.geometry = mesh._geometry;\n      batcher.addToBatch(gpuBatchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      instructionSet.add(mesh);\n    }\n  }\n  updateRenderable(mesh) {\n    if (mesh.batched) {\n      const gpuBatchableMesh = this._gpuBatchableMeshHash[mesh.uid];\n      gpuBatchableMesh.setTexture(mesh._texture);\n      gpuBatchableMesh.geometry = mesh._geometry;\n      gpuBatchableMesh._batcher.updateElement(gpuBatchableMesh);\n    }\n  }\n  destroyRenderable(mesh) {\n    this._meshDataHash[mesh.uid] = null;\n    const gpuMesh = this._gpuBatchableMeshHash[mesh.uid];\n    if (gpuMesh) {\n      BigPool.return(gpuMesh);\n      this._gpuBatchableMeshHash[mesh.uid] = null;\n    }\n    mesh.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(mesh) {\n    if (!mesh.isRenderable)\n      return;\n    mesh.state.blendMode = getAdjustedBlendModeBlend(mesh.groupBlendMode, mesh.texture._source);\n    const localUniforms = this.localUniforms;\n    localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n    localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n    localUniforms.update();\n    color32BitToUniform(\n      mesh.groupColorAlpha,\n      localUniforms.uniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, mesh);\n  }\n  _getMeshData(mesh) {\n    return this._meshDataHash[mesh.uid] || this._initMeshData(mesh);\n  }\n  _initMeshData(mesh) {\n    this._meshDataHash[mesh.uid] = {\n      batched: mesh.batched,\n      indexSize: mesh._geometry.indices?.length,\n      vertexSize: mesh._geometry.positions?.length\n    };\n    mesh.on(\"destroyed\", this._destroyRenderableBound);\n    return this._meshDataHash[mesh.uid];\n  }\n  _getBatchableMesh(mesh) {\n    return this._gpuBatchableMeshHash[mesh.uid] || this._initBatchableMesh(mesh);\n  }\n  _initBatchableMesh(mesh) {\n    const gpuMesh = BigPool.get(BatchableMesh);\n    gpuMesh.renderable = mesh;\n    gpuMesh.setTexture(mesh._texture);\n    gpuMesh.transform = mesh.groupTransform;\n    gpuMesh.roundPixels = this.renderer._roundPixels | mesh._roundPixels;\n    this._gpuBatchableMeshHash[mesh.uid] = gpuMesh;\n    return gpuMesh;\n  }\n  destroy() {\n    for (const i in this._gpuBatchableMeshHash) {\n      if (this._gpuBatchableMeshHash[i]) {\n        BigPool.return(this._gpuBatchableMeshHash[i]);\n      }\n    }\n    this._gpuBatchableMeshHash = null;\n    this._meshDataHash = null;\n    this.localUniforms = null;\n    this.localUniformsBindGroup = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.renderer = null;\n  }\n}\n/** @ignore */\nMeshPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"mesh\"\n};\n\nexport { MeshPipe };\n//# sourceMappingURL=MeshPipe.mjs.map\n","\"use strict\";\nclass GlParticleContainerAdaptor {\n  execute(particleContainerPipe, container) {\n    const state = particleContainerPipe.state;\n    const renderer = particleContainerPipe.renderer;\n    const shader = container.shader || particleContainerPipe.defaultShader;\n    shader.resources.uTexture = container.texture._source;\n    shader.resources.uniforms = particleContainerPipe.localUniforms;\n    const gl = renderer.gl;\n    const buffer = particleContainerPipe.getBuffers(container);\n    renderer.shader.bind(shader);\n    renderer.state.set(state);\n    renderer.geometry.bind(buffer.geometry, shader.glProgram);\n    const byteSize = buffer.geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n    const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n    gl.drawElements(gl.TRIANGLES, container.particleChildren.length * 6, glType, 0);\n  }\n}\n\nexport { GlParticleContainerAdaptor };\n//# sourceMappingURL=GlParticleContainerAdaptor.mjs.map\n","\"use strict\";\nclass GpuParticleContainerAdaptor {\n  execute(particleContainerPipe, container) {\n    const renderer = particleContainerPipe.renderer;\n    const shader = container.shader || particleContainerPipe.defaultShader;\n    shader.groups[0] = renderer.renderPipes.uniformBatch.getUniformBindGroup(particleContainerPipe.localUniforms, true);\n    shader.groups[1] = renderer.texture.getTextureBindGroup(container.texture);\n    const state = particleContainerPipe.state;\n    const buffer = particleContainerPipe.getBuffers(container);\n    renderer.encoder.draw({\n      geometry: buffer.geometry,\n      shader: container.shader || particleContainerPipe.defaultShader,\n      state,\n      size: container.particleChildren.length * 6\n    });\n  }\n}\n\nexport { GpuParticleContainerAdaptor };\n//# sourceMappingURL=GpuParticleContainerAdaptor.mjs.map\n","\"use strict\";\nfunction createIndicesForQuads(size, outBuffer = null) {\n  const totalIndices = size * 6;\n  if (totalIndices > 65535) {\n    outBuffer || (outBuffer = new Uint32Array(totalIndices));\n  } else {\n    outBuffer || (outBuffer = new Uint16Array(totalIndices));\n  }\n  if (outBuffer.length !== totalIndices) {\n    throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n  }\n  for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4) {\n    outBuffer[i + 0] = j + 0;\n    outBuffer[i + 1] = j + 1;\n    outBuffer[i + 2] = j + 2;\n    outBuffer[i + 3] = j + 0;\n    outBuffer[i + 4] = j + 2;\n    outBuffer[i + 5] = j + 3;\n  }\n  return outBuffer;\n}\n\nexport { createIndicesForQuads };\n//# sourceMappingURL=createIndicesForQuads.mjs.map\n","import { getAttributeInfoFromFormat } from '../../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs';\n\n\"use strict\";\nfunction generateParticleUpdateFunction(properties) {\n  return {\n    dynamicUpdate: generateUpdateFunction(properties, true),\n    staticUpdate: generateUpdateFunction(properties, false)\n  };\n}\nfunction generateUpdateFunction(properties, dynamic) {\n  const funcFragments = [];\n  funcFragments.push(`\n      \n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            `);\n  let offset = 0;\n  for (const i in properties) {\n    const property = properties[i];\n    if (dynamic !== property.dynamic)\n      continue;\n    funcFragments.push(`offset = index + ${offset}`);\n    funcFragments.push(property.code);\n    const attributeInfo = getAttributeInfoFromFormat(property.format);\n    offset += attributeInfo.stride / 4;\n  }\n  funcFragments.push(`\n            index += stride * 4;\n        }\n    `);\n  funcFragments.unshift(`\n        var stride = ${offset};\n    `);\n  const functionSource = funcFragments.join(\"\\n\");\n  return new Function(\"ps\", \"f32v\", \"u32v\", functionSource);\n}\n\nexport { generateParticleUpdateFunction };\n//# sourceMappingURL=generateParticleUpdateFunction.mjs.map\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { getAttributeInfoFromFormat } from '../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs';\nimport { ViewableBuffer } from '../../../utils/data/ViewableBuffer.mjs';\nimport { createIndicesForQuads } from './utils/createIndicesForQuads.mjs';\nimport { generateParticleUpdateFunction } from './utils/generateParticleUpdateFunction.mjs';\n\n\"use strict\";\nclass ParticleBuffer {\n  constructor(options) {\n    this._size = 0;\n    this._generateParticleUpdateCache = {};\n    const size = this._size = options.size ?? 1e3;\n    const properties = options.properties;\n    let staticVertexSize = 0;\n    let dynamicVertexSize = 0;\n    for (const i in properties) {\n      const property = properties[i];\n      const attributeInfo = getAttributeInfoFromFormat(property.format);\n      if (property.dynamic) {\n        dynamicVertexSize += attributeInfo.stride;\n      } else {\n        staticVertexSize += attributeInfo.stride;\n      }\n    }\n    this._dynamicStride = dynamicVertexSize / 4;\n    this._staticStride = staticVertexSize / 4;\n    this.staticAttributeBuffer = new ViewableBuffer(size * 4 * staticVertexSize);\n    this.dynamicAttributeBuffer = new ViewableBuffer(size * 4 * dynamicVertexSize);\n    this.indexBuffer = createIndicesForQuads(size);\n    const geometry = new Geometry();\n    let dynamicOffset = 0;\n    let staticOffset = 0;\n    this._staticBuffer = new Buffer({\n      data: new Float32Array(1),\n      label: \"static-particle-buffer\",\n      shrinkToFit: false,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    this._dynamicBuffer = new Buffer({\n      data: new Float32Array(1),\n      label: \"dynamic-particle-buffer\",\n      shrinkToFit: false,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    for (const i in properties) {\n      const property = properties[i];\n      const attributeInfo = getAttributeInfoFromFormat(property.format);\n      if (property.dynamic) {\n        geometry.addAttribute(property.attributeName, {\n          buffer: this._dynamicBuffer,\n          stride: this._dynamicStride * 4,\n          offset: dynamicOffset * 4,\n          format: property.format\n        });\n        dynamicOffset += attributeInfo.size;\n      } else {\n        geometry.addAttribute(property.attributeName, {\n          buffer: this._staticBuffer,\n          stride: this._staticStride * 4,\n          offset: staticOffset * 4,\n          format: property.format\n        });\n        staticOffset += attributeInfo.size;\n      }\n    }\n    geometry.addIndex(this.indexBuffer);\n    const uploadFunction = this.getParticleUpdate(properties);\n    this._dynamicUpload = uploadFunction.dynamicUpdate;\n    this._staticUpload = uploadFunction.staticUpdate;\n    this.geometry = geometry;\n  }\n  getParticleUpdate(properties) {\n    const key = getParticleSyncKey(properties);\n    if (this._generateParticleUpdateCache[key]) {\n      return this._generateParticleUpdateCache[key];\n    }\n    this._generateParticleUpdateCache[key] = this.generateParticleUpdate(properties);\n    return this._generateParticleUpdateCache[key];\n  }\n  generateParticleUpdate(properties) {\n    return generateParticleUpdateFunction(properties);\n  }\n  update(particles, uploadStatic) {\n    if (particles.length > this._size) {\n      uploadStatic = true;\n      this._size = Math.max(particles.length, this._size * 1.5 | 0);\n      this.staticAttributeBuffer = new ViewableBuffer(this._size * this._staticStride * 4 * 4);\n      this.dynamicAttributeBuffer = new ViewableBuffer(this._size * this._dynamicStride * 4 * 4);\n      this.indexBuffer = createIndicesForQuads(this._size);\n      this.geometry.indexBuffer.setDataWithSize(\n        this.indexBuffer,\n        this.indexBuffer.byteLength,\n        true\n      );\n    }\n    const dynamicAttributeBuffer = this.dynamicAttributeBuffer;\n    this._dynamicUpload(particles, dynamicAttributeBuffer.float32View, dynamicAttributeBuffer.uint32View);\n    this._dynamicBuffer.setDataWithSize(\n      this.dynamicAttributeBuffer.float32View,\n      particles.length * this._dynamicStride * 4,\n      true\n    );\n    if (uploadStatic) {\n      const staticAttributeBuffer = this.staticAttributeBuffer;\n      this._staticUpload(particles, staticAttributeBuffer.float32View, staticAttributeBuffer.uint32View);\n      this._staticBuffer.setDataWithSize(\n        staticAttributeBuffer.float32View,\n        particles.length * this._staticStride * 4,\n        true\n      );\n    }\n  }\n  destroy() {\n    this._staticBuffer.destroy();\n    this._dynamicBuffer.destroy();\n    this.geometry.destroy();\n  }\n}\nfunction getParticleSyncKey(properties) {\n  const keyGen = [];\n  for (const key in properties) {\n    const property = properties[key];\n    keyGen.push(key, property.code, property.dynamic ? \"d\" : \"s\");\n  }\n  return keyGen.join(\"_\");\n}\n\nexport { ParticleBuffer };\n//# sourceMappingURL=ParticleBuffer.mjs.map\n","var fragment = \"varying vec2 vUV;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uTexture;\\n\\nvoid main(void){\\n    vec4 color = texture2D(uTexture, vUV) * vColor;\\n    gl_FragColor = color;\\n}\";\n\nexport { fragment as default };\n//# sourceMappingURL=particles.frag.mjs.map\n","var vertex = \"attribute vec2 aVertex;\\nattribute vec2 aUV;\\nattribute vec4 aColor;\\n\\nattribute vec2 aPosition;\\nattribute float aRotation;\\n\\nuniform mat3 uTranslationMatrix;\\nuniform float uRound;\\nuniform vec2 uResolution;\\nuniform vec4 uColor;\\n\\nvarying vec2 vUV;\\nvarying vec4 vColor;\\n\\nvec2 roundPixels(vec2 position, vec2 targetSize)\\n{       \\n    return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\\n}\\n\\nvoid main(void){\\n    float cosRotation = cos(aRotation);\\n    float sinRotation = sin(aRotation);\\n    float x = aVertex.x * cosRotation - aVertex.y * sinRotation;\\n    float y = aVertex.x * sinRotation + aVertex.y * cosRotation;\\n\\n    vec2 v = vec2(x, y);\\n    v = v + aPosition;\\n\\n    gl_Position = vec4((uTranslationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n    if(uRound == 1.0)\\n    {\\n        gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\\n    }\\n\\n    vUV = aUV;\\n    vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uColor;\\n}\\n\";\n\nexport { vertex as default };\n//# sourceMappingURL=particles.vert.mjs.map\n","var wgsl = \"\\nstruct ParticleUniforms {\\n  uProjectionMatrix:mat3x3<f32>,\\n  uColor:vec4<f32>,\\n  uResolution:vec2<f32>,\\n  uRoundPixels:f32,\\n};\\n\\n@group(0) @binding(0) var<uniform> uniforms: ParticleUniforms;\\n\\n@group(1) @binding(0) var uTexture: texture_2d<f32>;\\n@group(1) @binding(1) var uSampler : sampler;\\n\\nstruct VSOutput {\\n    @builtin(position) position: vec4<f32>,\\n    @location(0) uv : vec2<f32>,\\n    @location(1) color : vec4<f32>,\\n  };\\n@vertex\\nfn mainVertex(\\n  @location(0) aVertex: vec2<f32>,\\n  @location(1) aPosition: vec2<f32>,\\n  @location(2) aUV: vec2<f32>,\\n  @location(3) aColor: vec4<f32>,\\n  @location(4) aRotation: f32,\\n) -> VSOutput {\\n  \\n   let v = vec2(\\n       aVertex.x * cos(aRotation) - aVertex.y * sin(aRotation),\\n       aVertex.x * sin(aRotation) + aVertex.y * cos(aRotation)\\n   ) + aPosition;\\n\\n   let position = vec4((uniforms.uProjectionMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n    let vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uniforms.uColor;\\n\\n  return VSOutput(\\n   position,\\n   aUV,\\n   vColor,\\n  );\\n}\\n\\n@fragment\\nfn mainFragment(\\n  @location(0) uv: vec2<f32>,\\n  @location(1) color: vec4<f32>,\\n  @builtin(position) position: vec4<f32>,\\n) -> @location(0) vec4<f32> {\\n\\n    var sample = textureSample(uTexture, uSampler, uv) * color;\\n   \\n    return sample;\\n}\";\n\nexport { wgsl as default };\n//# sourceMappingURL=particles.wgsl.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { GlProgram } from '../../../../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../../../../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { Shader } from '../../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { TextureStyle } from '../../../../rendering/renderers/shared/texture/TextureStyle.mjs';\nimport fragment from './particles.frag.mjs';\nimport vertex from './particles.vert.mjs';\nimport wgsl from './particles.wgsl.mjs';\n\n\"use strict\";\nclass ParticleShader extends Shader {\n  constructor() {\n    const glProgram = GlProgram.from({\n      vertex,\n      fragment\n    });\n    const gpuProgram = GpuProgram.from({\n      fragment: {\n        source: wgsl,\n        entryPoint: \"mainFragment\"\n      },\n      vertex: {\n        source: wgsl,\n        entryPoint: \"mainVertex\"\n      }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        // this will be replaced with the texture from the particle container\n        uTexture: Texture.WHITE.source,\n        // this will be replaced with the texture style from the particle container\n        uSampler: new TextureStyle({}),\n        // this will be replaced with the local uniforms from the particle container\n        uniforms: {\n          uTranslationMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Color(16777215), type: \"vec4<f32>\" },\n          uRound: { value: 1, type: \"f32\" },\n          uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n        }\n      }\n    });\n  }\n}\n\nexport { ParticleShader };\n//# sourceMappingURL=ParticleShader.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { ParticleBuffer } from './ParticleBuffer.mjs';\nimport { ParticleShader } from './shader/ParticleShader.mjs';\n\n\"use strict\";\nclass ParticleContainerPipe {\n  /**\n   * @param renderer - The renderer this sprite batch works for.\n   * @param adaptor\n   */\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    this._gpuBufferHash = /* @__PURE__ */ Object.create(null);\n    // eslint-disable-next-line max-len\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.localUniforms = new UniformGroup({\n      uTranslationMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uRound: { value: 1, type: \"f32\" },\n      uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n    });\n    this.renderer = renderer;\n    this.adaptor = adaptor;\n    this.defaultShader = new ParticleShader();\n    this.state = State.for2d();\n  }\n  validateRenderable(_renderable) {\n    return false;\n  }\n  addRenderable(renderable, instructionSet) {\n    this.renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(renderable);\n  }\n  getBuffers(renderable) {\n    return this._gpuBufferHash[renderable.uid] || this._initBuffer(renderable);\n  }\n  _initBuffer(renderable) {\n    this._gpuBufferHash[renderable.uid] = new ParticleBuffer({\n      size: renderable.particleChildren.length,\n      properties: renderable._properties\n    });\n    renderable.on(\"destroyed\", this._destroyRenderableBound);\n    return this._gpuBufferHash[renderable.uid];\n  }\n  updateRenderable(_renderable) {\n  }\n  destroyRenderable(renderable) {\n    const buffer = this._gpuBufferHash[renderable.uid];\n    buffer.destroy();\n    this._gpuBufferHash[renderable.uid] = null;\n    renderable.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(container) {\n    const children = container.particleChildren;\n    if (children.length === 0) {\n      return;\n    }\n    const renderer = this.renderer;\n    const buffer = this.getBuffers(container);\n    container.texture || (container.texture = children[0].texture);\n    const state = this.state;\n    buffer.update(children, container._childrenDirty);\n    container._childrenDirty = false;\n    state.blendMode = getAdjustedBlendModeBlend(container.blendMode, container.texture._source);\n    const uniforms = this.localUniforms.uniforms;\n    const transformationMatrix = uniforms.uTranslationMatrix;\n    container.worldTransform.copyTo(transformationMatrix);\n    transformationMatrix.prepend(renderer.globalUniforms.globalUniformData.projectionMatrix);\n    uniforms.uResolution = renderer.globalUniforms.globalUniformData.resolution;\n    uniforms.uRound = renderer._roundPixels | container._roundPixels;\n    color32BitToUniform(\n      container.groupColorAlpha,\n      uniforms.uColor,\n      0\n    );\n    this.adaptor.execute(this, container);\n  }\n  /** Destroys the ParticleRenderer. */\n  destroy() {\n    if (this.defaultShader) {\n      this.defaultShader.destroy();\n      this.defaultShader = null;\n    }\n  }\n}\n\nexport { ParticleContainerPipe };\n//# sourceMappingURL=ParticleContainerPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GlParticleContainerAdaptor } from '../gl/GlParticleContainerAdaptor.mjs';\nimport { ParticleContainerPipe } from './ParticleContainerPipe.mjs';\n\n\"use strict\";\nclass GlParticleContainerPipe extends ParticleContainerPipe {\n  constructor(renderer) {\n    super(renderer, new GlParticleContainerAdaptor());\n  }\n}\n/** @ignore */\nGlParticleContainerPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes\n  ],\n  name: \"particle\"\n};\n\nexport { GlParticleContainerPipe };\n//# sourceMappingURL=GlParticleContainerPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GpuParticleContainerAdaptor } from '../gpu/GpuParticleContainerAdaptor.mjs';\nimport { ParticleContainerPipe } from './ParticleContainerPipe.mjs';\n\n\"use strict\";\nclass GpuParticleContainerPipe extends ParticleContainerPipe {\n  constructor(renderer) {\n    super(renderer, new GpuParticleContainerAdaptor());\n  }\n}\n/** @ignore */\nGpuParticleContainerPipe.extension = {\n  type: [\n    ExtensionType.WebGPUPipes\n  ],\n  name: \"particle\"\n};\n\nexport { GpuParticleContainerPipe };\n//# sourceMappingURL=GpuParticleContainerPipe.mjs.map\n","import { PlaneGeometry } from '../mesh-plane/PlaneGeometry.mjs';\n\n\"use strict\";\nconst _NineSliceGeometry = class _NineSliceGeometry extends PlaneGeometry {\n  constructor(options = {}) {\n    options = { ..._NineSliceGeometry.defaultOptions, ...options };\n    super({\n      width: options.width,\n      height: options.height,\n      verticesX: 4,\n      verticesY: 4\n    });\n    this.update(options);\n  }\n  /**\n   * Updates the NineSliceGeometry with the options.\n   * @param options - The options of the NineSliceGeometry.\n   */\n  update(options) {\n    this.width = options.width ?? this.width;\n    this.height = options.height ?? this.height;\n    this._originalWidth = options.originalWidth ?? this._originalWidth;\n    this._originalHeight = options.originalHeight ?? this._originalHeight;\n    this._leftWidth = options.leftWidth ?? this._leftWidth;\n    this._rightWidth = options.rightWidth ?? this._rightWidth;\n    this._topHeight = options.topHeight ?? this._topHeight;\n    this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n    this._anchorX = options.anchor?.x;\n    this._anchorY = options.anchor?.y;\n    this.updateUvs();\n    this.updatePositions();\n  }\n  /** Updates the positions of the vertices. */\n  updatePositions() {\n    const p = this.positions;\n    const {\n      width,\n      height,\n      _leftWidth,\n      _rightWidth,\n      _topHeight,\n      _bottomHeight,\n      _anchorX,\n      _anchorY\n    } = this;\n    const w = _leftWidth + _rightWidth;\n    const scaleW = width > w ? 1 : width / w;\n    const h = _topHeight + _bottomHeight;\n    const scaleH = height > h ? 1 : height / h;\n    const scale = Math.min(scaleW, scaleH);\n    const anchorOffsetX = _anchorX * width;\n    const anchorOffsetY = _anchorY * height;\n    p[0] = p[8] = p[16] = p[24] = -anchorOffsetX;\n    p[2] = p[10] = p[18] = p[26] = _leftWidth * scale - anchorOffsetX;\n    p[4] = p[12] = p[20] = p[28] = width - _rightWidth * scale - anchorOffsetX;\n    p[6] = p[14] = p[22] = p[30] = width - anchorOffsetX;\n    p[1] = p[3] = p[5] = p[7] = -anchorOffsetY;\n    p[9] = p[11] = p[13] = p[15] = _topHeight * scale - anchorOffsetY;\n    p[17] = p[19] = p[21] = p[23] = height - _bottomHeight * scale - anchorOffsetY;\n    p[25] = p[27] = p[29] = p[31] = height - anchorOffsetY;\n    this.getBuffer(\"aPosition\").update();\n  }\n  /** Updates the UVs of the vertices. */\n  updateUvs() {\n    const uvs = this.uvs;\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    const _uvw = 1 / this._originalWidth;\n    const _uvh = 1 / this._originalHeight;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.getBuffer(\"aUV\").update();\n  }\n};\n/** The default options for the NineSliceGeometry. */\n_NineSliceGeometry.defaultOptions = {\n  /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  width: 100,\n  /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  height: 100,\n  /** The width of the left column. */\n  leftWidth: 10,\n  /** The height of the top row. */\n  topHeight: 10,\n  /** The width of the right column. */\n  rightWidth: 10,\n  /** The height of the bottom row. */\n  bottomHeight: 10,\n  /** The original width of the texture */\n  originalWidth: 100,\n  /** The original height of the texture */\n  originalHeight: 100\n};\nlet NineSliceGeometry = _NineSliceGeometry;\n\nexport { NineSliceGeometry };\n//# sourceMappingURL=NineSliceGeometry.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { NineSliceGeometry } from './NineSliceGeometry.mjs';\n\n\"use strict\";\nclass NineSliceSpritePipe {\n  constructor(renderer) {\n    this._gpuSpriteHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuSpriteHash\");\n  }\n  addRenderable(sprite, instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._gpuSpriteHash[sprite.uid];\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite._batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    return !gpuSprite._batcher.checkAndUpdateTexture(\n      gpuSprite,\n      sprite._texture\n    );\n  }\n  destroyRenderable(sprite) {\n    const batchableMesh = this._gpuSpriteHash[sprite.uid];\n    BigPool.return(batchableMesh.geometry);\n    BigPool.return(batchableMesh);\n    this._gpuSpriteHash[sprite.uid] = null;\n    sprite.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    batchableSprite.geometry.update(sprite);\n    batchableSprite.setTexture(sprite._texture);\n  }\n  _getGpuSprite(sprite) {\n    return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const batchableMesh = BigPool.get(BatchableMesh);\n    batchableMesh.geometry = BigPool.get(NineSliceGeometry);\n    batchableMesh.renderable = sprite;\n    batchableMesh.transform = sprite.groupTransform;\n    batchableMesh.texture = sprite._texture;\n    batchableMesh.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    this._gpuSpriteHash[sprite.uid] = batchableMesh;\n    if (!sprite.didViewUpdate) {\n      this._updateBatchableSprite(sprite, batchableMesh);\n    }\n    sprite.on(\"destroyed\", this._destroyRenderableBound);\n    return batchableMesh;\n  }\n  destroy() {\n    for (const i in this._gpuSpriteHash) {\n      const batchableMesh = this._gpuSpriteHash[i];\n      batchableMesh.geometry.destroy();\n    }\n    this._gpuSpriteHash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nNineSliceSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"nineSliceSprite\"\n};\n\nexport { NineSliceSpritePipe };\n//# sourceMappingURL=NineSliceSpritePipe.mjs.map\n","\"use strict\";\nconst tilingBit = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    )\n  }\n};\nconst tilingBitGl = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        `\n    )\n  }\n};\n\nexport { tilingBit, tilingBitGl };\n//# sourceMappingURL=tilingBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { tilingBit, tilingBitGl } from './tilingBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass TilingSpriteShader extends Shader {\n  constructor() {\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBit,\n        tilingBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBitGl,\n        tilingBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    const tilingUniforms = new UniformGroup({\n      uMapCoord: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: \"vec4<f32>\" },\n      uClampOffset: { value: new Float32Array([0, 0]), type: \"vec2<f32>\" },\n      uTextureTransform: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: \"vec4<f32>\" }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: new UniformGroup({\n          uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n          uRound: { value: 0, type: \"f32\" }\n        }),\n        tilingUniforms,\n        uTexture: Texture.EMPTY.source,\n        uSampler: Texture.EMPTY.source.style\n      }\n    });\n  }\n  updateUniforms(width, height, matrix, anchorX, anchorY, texture) {\n    const tilingUniforms = this.resources.tilingUniforms;\n    const textureWidth = texture.width;\n    const textureHeight = texture.height;\n    const textureMatrix = texture.textureMatrix;\n    const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n    uTextureTransform.set(\n      matrix.a * textureWidth / width,\n      matrix.b * textureWidth / height,\n      matrix.c * textureHeight / width,\n      matrix.d * textureHeight / height,\n      matrix.tx / width,\n      matrix.ty / height\n    );\n    uTextureTransform.invert();\n    tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n    tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n    tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n    tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n    tilingUniforms.uniforms.uSizeAnchor[0] = width;\n    tilingUniforms.uniforms.uSizeAnchor[1] = height;\n    tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n    tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n    if (texture) {\n      this.resources.uTexture = texture.source;\n      this.resources.uSampler = texture.source.style;\n    }\n  }\n}\n\nexport { TilingSpriteShader };\n//# sourceMappingURL=TilingSpriteShader.mjs.map\n","import { MeshGeometry } from '../../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nclass QuadGeometry extends MeshGeometry {\n  constructor() {\n    super({\n      positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      indices: new Uint32Array([0, 1, 2, 0, 2, 3])\n    });\n  }\n}\n\nexport { QuadGeometry };\n//# sourceMappingURL=QuadGeometry.mjs.map\n","\"use strict\";\nfunction setPositions(tilingSprite, positions) {\n  const anchorX = tilingSprite.anchor.x;\n  const anchorY = tilingSprite.anchor.y;\n  positions[0] = -anchorX * tilingSprite.width;\n  positions[1] = -anchorY * tilingSprite.height;\n  positions[2] = (1 - anchorX) * tilingSprite.width;\n  positions[3] = -anchorY * tilingSprite.height;\n  positions[4] = (1 - anchorX) * tilingSprite.width;\n  positions[5] = (1 - anchorY) * tilingSprite.height;\n  positions[6] = -anchorX * tilingSprite.width;\n  positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n\nexport { setPositions };\n//# sourceMappingURL=setPositions.mjs.map\n","\"use strict\";\nfunction applyMatrix(array, stride, offset, matrix) {\n  let index = 0;\n  const size = array.length / (stride || 2);\n  const a = matrix.a;\n  const b = matrix.b;\n  const c = matrix.c;\n  const d = matrix.d;\n  const tx = matrix.tx;\n  const ty = matrix.ty;\n  offset *= stride;\n  while (index < size) {\n    const x = array[offset];\n    const y = array[offset + 1];\n    array[offset] = a * x + c * y + tx;\n    array[offset + 1] = b * x + d * y + ty;\n    offset += stride;\n    index++;\n  }\n}\n\nexport { applyMatrix };\n//# sourceMappingURL=applyMatrix.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { applyMatrix } from './applyMatrix.mjs';\n\n\"use strict\";\nfunction setUvs(tilingSprite, uvs) {\n  const texture = tilingSprite.texture;\n  const width = texture.frame.width;\n  const height = texture.frame.height;\n  let anchorX = 0;\n  let anchorY = 0;\n  if (tilingSprite.applyAnchorToTexture) {\n    anchorX = tilingSprite.anchor.x;\n    anchorY = tilingSprite.anchor.y;\n  }\n  uvs[0] = uvs[6] = -anchorX;\n  uvs[2] = uvs[4] = 1 - anchorX;\n  uvs[1] = uvs[3] = -anchorY;\n  uvs[5] = uvs[7] = 1 - anchorY;\n  const textureMatrix = Matrix.shared;\n  textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n  textureMatrix.tx /= tilingSprite.width;\n  textureMatrix.ty /= tilingSprite.height;\n  textureMatrix.invert();\n  textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n  applyMatrix(uvs, 2, 0, textureMatrix);\n}\n\nexport { setUvs };\n//# sourceMappingURL=setUvs.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { getAdjustedBlendModeBlend } from '../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../rendering/renderers/shared/state/State.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader.mjs';\nimport { QuadGeometry } from './utils/QuadGeometry.mjs';\nimport { setPositions } from './utils/setPositions.mjs';\nimport { setUvs } from './utils/setUvs.mjs';\n\n\"use strict\";\nconst sharedQuad = new QuadGeometry();\nclass TilingSpritePipe {\n  constructor(renderer) {\n    this._state = State.default2d;\n    this._tilingSpriteDataHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_tilingSpriteDataHash\");\n  }\n  validateRenderable(renderable) {\n    const tilingSpriteData = this._getTilingSpriteData(renderable);\n    const couldBatch = tilingSpriteData.canBatch;\n    this._updateCanBatch(renderable);\n    const canBatch = tilingSpriteData.canBatch;\n    if (canBatch && canBatch === couldBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      return !batchableMesh._batcher.checkAndUpdateTexture(\n        batchableMesh,\n        renderable.texture\n      );\n    }\n    return couldBatch !== canBatch;\n  }\n  addRenderable(tilingSprite, instructionSet) {\n    const batcher = this._renderer.renderPipes.batch;\n    this._updateCanBatch(tilingSprite);\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { geometry, canBatch } = tilingSpriteData;\n    if (canBatch) {\n      tilingSpriteData.batchableMesh || (tilingSpriteData.batchableMesh = new BatchableMesh());\n      const batchableMesh = tilingSpriteData.batchableMesh;\n      if (tilingSprite.didViewUpdate) {\n        this._updateBatchableMesh(tilingSprite);\n        batchableMesh.geometry = geometry;\n        batchableMesh.renderable = tilingSprite;\n        batchableMesh.transform = tilingSprite.groupTransform;\n        batchableMesh.setTexture(tilingSprite._texture);\n      }\n      batchableMesh.roundPixels = this._renderer._roundPixels | tilingSprite._roundPixels;\n      batcher.addToBatch(batchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      tilingSpriteData.shader || (tilingSpriteData.shader = new TilingSpriteShader());\n      this.updateRenderable(tilingSprite);\n      instructionSet.add(tilingSprite);\n    }\n  }\n  execute(tilingSprite) {\n    const { shader } = this._tilingSpriteDataHash[tilingSprite.uid];\n    shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n    localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n    color32BitToUniform(\n      tilingSprite.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._state.blendMode = getAdjustedBlendModeBlend(tilingSprite.groupBlendMode, tilingSprite.texture._source);\n    this._renderer.encoder.draw({\n      geometry: sharedQuad,\n      shader,\n      state: this._state\n    });\n  }\n  updateRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { canBatch } = tilingSpriteData;\n    if (canBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      if (tilingSprite.didViewUpdate)\n        this._updateBatchableMesh(tilingSprite);\n      batchableMesh._batcher.updateElement(batchableMesh);\n    } else if (tilingSprite.didViewUpdate) {\n      const { shader } = tilingSpriteData;\n      shader.updateUniforms(\n        tilingSprite.width,\n        tilingSprite.height,\n        tilingSprite._tileTransform.matrix,\n        tilingSprite.anchor.x,\n        tilingSprite.anchor.y,\n        tilingSprite.texture\n      );\n    }\n  }\n  destroyRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    tilingSpriteData.batchableMesh = null;\n    tilingSpriteData.shader?.destroy();\n    this._tilingSpriteDataHash[tilingSprite.uid] = null;\n    tilingSprite.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  _getTilingSpriteData(renderable) {\n    return this._tilingSpriteDataHash[renderable.uid] || this._initTilingSpriteData(renderable);\n  }\n  _initTilingSpriteData(tilingSprite) {\n    const geometry = new MeshGeometry({\n      indices: sharedQuad.indices,\n      positions: sharedQuad.positions.slice(),\n      uvs: sharedQuad.uvs.slice()\n    });\n    this._tilingSpriteDataHash[tilingSprite.uid] = {\n      canBatch: true,\n      renderable: tilingSprite,\n      geometry\n    };\n    tilingSprite.on(\"destroyed\", this._destroyRenderableBound);\n    return this._tilingSpriteDataHash[tilingSprite.uid];\n  }\n  _updateBatchableMesh(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const { geometry } = renderableData;\n    const style = tilingSprite.texture.source.style;\n    if (style.addressMode !== \"repeat\") {\n      style.addressMode = \"repeat\";\n      style.update();\n    }\n    setUvs(tilingSprite, geometry.uvs);\n    setPositions(tilingSprite, geometry.positions);\n  }\n  destroy() {\n    for (const i in this._tilingSpriteDataHash) {\n      this.destroyRenderable(this._tilingSpriteDataHash[i].renderable);\n    }\n    this._tilingSpriteDataHash = null;\n    this._renderer = null;\n  }\n  _updateCanBatch(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const texture = tilingSprite.texture;\n    let _nonPowOf2wrapping = true;\n    if (this._renderer.type === RendererType.WEBGL) {\n      _nonPowOf2wrapping = this._renderer.context.supports.nonPowOf2wrapping;\n    }\n    renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n    return renderableData.canBatch;\n  }\n}\n/** @ignore */\nTilingSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"tilingSprite\"\n};\n\nexport { TilingSpritePipe };\n//# sourceMappingURL=TilingSpritePipe.mjs.map\n","\"use strict\";\nconst localUniformMSDFBit = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `\n    ),\n    main: (\n      /* wgsl */\n      ` \n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        `\n    )\n  }\n};\nconst localUniformMSDFBitGl = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform float uDistance;\n         `\n    ),\n    main: (\n      /* glsl */\n      ` \n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        `\n    )\n  }\n};\n\nexport { localUniformMSDFBit, localUniformMSDFBitGl };\n//# sourceMappingURL=localUniformMSDFBit.mjs.map\n","\"use strict\";\nconst mSDFBit = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n             \n            }\n        `\n    )\n  }\n};\nconst mSDFBitGl = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);  \n              \n                return coverage;\n            }\n        `\n    )\n  }\n};\n\nexport { mSDFBit, mSDFBitGl };\n//# sourceMappingURL=mSDFBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { getMaxTexturesPerBatch } from '../../../rendering/batcher/gl/utils/maxRecommendedTextures.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit.mjs';\nimport { generateTextureBatchBit, generateTextureBatchBitGl } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit.mjs';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass SdfShader extends Shader {\n  constructor() {\n    const uniforms = new UniformGroup({\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uDistance: { value: 4, type: \"f32\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    const maxTextures = getMaxTexturesPerBatch();\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBit,\n        generateTextureBatchBit(maxTextures),\n        localUniformMSDFBit,\n        mSDFBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBitGl,\n        generateTextureBatchBitGl(maxTextures),\n        localUniformMSDFBitGl,\n        mSDFBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: uniforms,\n        batchSamplers: getBatchSamplersUniformGroup(maxTextures)\n      }\n    });\n  }\n}\n\nexport { SdfShader };\n//# sourceMappingURL=SdfShader.mjs.map\n","import { Cache } from '../../assets/cache/Cache.mjs';\nimport { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { Graphics } from '../graphics/shared/Graphics.mjs';\nimport { SdfShader } from '../text/sdfShader/SdfShader.mjs';\nimport { BitmapFontManager } from './BitmapFontManager.mjs';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout.mjs';\n\n\"use strict\";\nclass BitmapTextPipe {\n  constructor(renderer) {\n    this._gpuBitmapText = {};\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuBitmapText\");\n  }\n  validateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n  }\n  addRenderable(bitmapText, instructionSet) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  destroyRenderable(bitmapText) {\n    bitmapText.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableByUid(bitmapText.uid);\n  }\n  _destroyRenderableByUid(renderableUid) {\n    const context = this._gpuBitmapText[renderableUid].context;\n    if (context.customShader) {\n      BigPool.return(context.customShader);\n      context.customShader = null;\n    }\n    BigPool.return(this._gpuBitmapText[renderableUid]);\n    this._gpuBitmapText[renderableUid] = null;\n  }\n  updateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  _updateContext(bitmapText, proxyGraphics) {\n    const { context } = proxyGraphics;\n    const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n    context.clear();\n    if (bitmapFont.distanceField.type !== \"none\") {\n      if (!context.customShader) {\n        context.customShader = BigPool.get(SdfShader);\n      }\n    }\n    const chars = Array.from(bitmapText.text);\n    const style = bitmapText._style;\n    let currentY = bitmapFont.baseLineOffset;\n    const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont, true);\n    let index = 0;\n    const padding = style.padding;\n    const scale = bitmapTextLayout.scale;\n    let tx = bitmapTextLayout.width;\n    let ty = bitmapTextLayout.height + bitmapTextLayout.offsetY;\n    if (style._stroke) {\n      tx += style._stroke.width / scale;\n      ty += style._stroke.width / scale;\n    }\n    context.translate(-bitmapText._anchor._x * tx - padding, -bitmapText._anchor._y * ty - padding).scale(scale, scale);\n    const tint = bitmapFont.applyFillAsTint ? style._fill.color : 16777215;\n    for (let i = 0; i < bitmapTextLayout.lines.length; i++) {\n      const line = bitmapTextLayout.lines[i];\n      for (let j = 0; j < line.charPositions.length; j++) {\n        const char = chars[index++];\n        const charData = bitmapFont.chars[char];\n        if (charData?.texture) {\n          context.texture(\n            charData.texture,\n            tint ? tint : \"black\",\n            Math.round(line.charPositions[j] + charData.xOffset),\n            Math.round(currentY + charData.yOffset)\n          );\n        }\n      }\n      currentY += bitmapFont.lineHeight;\n    }\n  }\n  _getGpuBitmapText(bitmapText) {\n    return this._gpuBitmapText[bitmapText.uid] || this.initGpuText(bitmapText);\n  }\n  initGpuText(bitmapText) {\n    const proxyRenderable = BigPool.get(Graphics);\n    this._gpuBitmapText[bitmapText.uid] = proxyRenderable;\n    this._updateContext(bitmapText, proxyRenderable);\n    bitmapText.on(\"destroyed\", this._destroyRenderableBound);\n    return this._gpuBitmapText[bitmapText.uid];\n  }\n  _updateDistanceField(bitmapText) {\n    const context = this._getGpuBitmapText(bitmapText).context;\n    const fontFamily = bitmapText._style.fontFamily;\n    const dynamicFont = Cache.get(`${fontFamily}-bitmap`);\n    const { a, b, c, d } = bitmapText.groupTransform;\n    const dx = Math.sqrt(a * a + b * b);\n    const dy = Math.sqrt(c * c + d * d);\n    const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n    const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n    const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale);\n    context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n  }\n  destroy() {\n    for (const uid in this._gpuBitmapText) {\n      this._destroyRenderableByUid(uid);\n    }\n    this._gpuBitmapText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nBitmapTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"bitmapText\"\n};\nfunction syncWithProxy(container, proxy) {\n  proxy.groupTransform = container.groupTransform;\n  proxy.groupColorAlpha = container.groupColorAlpha;\n  proxy.groupColor = container.groupColor;\n  proxy.groupBlendMode = container.groupBlendMode;\n  proxy.globalDisplayStatus = container.globalDisplayStatus;\n  proxy.groupTransform = container.groupTransform;\n  proxy.localDisplayStatus = container.localDisplayStatus;\n  proxy.groupAlpha = container.groupAlpha;\n  proxy._roundPixels = container._roundPixels;\n}\n\nexport { BitmapTextPipe };\n//# sourceMappingURL=BitmapTextPipe.mjs.map\n","import { updateQuadBounds } from '../../../utils/data/updateQuadBounds.mjs';\n\n\"use strict\";\nfunction updateTextBounds(batchableSprite, text) {\n  const { texture, bounds } = batchableSprite;\n  updateQuadBounds(bounds, text._anchor, texture);\n  const padding = text._style.padding;\n  bounds.minX -= padding;\n  bounds.minY -= padding;\n  bounds.maxX -= padding;\n  bounds.maxY -= padding;\n}\n\nexport { updateTextBounds };\n//# sourceMappingURL=updateTextBounds.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../sprite/BatchableSprite.mjs';\nimport { updateTextBounds } from '../text/utils/updateTextBounds.mjs';\n\n\"use strict\";\nclass HTMLTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.runners.resolutionChange.add(this);\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuText\");\n  }\n  resolutionChange() {\n    for (const i in this._gpuText) {\n      const gpuText = this._gpuText[i];\n      if (!gpuText)\n        continue;\n      const text = gpuText.batchableSprite.renderable;\n      if (text._autoResolution) {\n        text._resolution = this._renderer.resolution;\n        text.onViewUpdate();\n      }\n    }\n  }\n  validateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const newKey = htmlText._getKey();\n    if (gpuText.textureNeedsUploading) {\n      gpuText.textureNeedsUploading = false;\n      return true;\n    }\n    if (gpuText.currentKey !== newKey) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(htmlText, instructionSet) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n  }\n  updateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    batchableSprite._batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(htmlText) {\n    htmlText.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableById(htmlText.uid);\n  }\n  _destroyRenderableById(htmlTextUid) {\n    const gpuText = this._gpuText[htmlTextUid];\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[htmlTextUid] = null;\n  }\n  _updateText(htmlText) {\n    const newKey = htmlText._getKey();\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(htmlText).catch((e) => {\n        console.error(e);\n      });\n    }\n    htmlText._didTextUpdate = false;\n    updateTextBounds(batchableSprite, htmlText);\n  }\n  async _updateGpuText(htmlText) {\n    htmlText._didTextUpdate = false;\n    const gpuText = this._getGpuText(htmlText);\n    if (gpuText.generatingTexture)\n      return;\n    const newKey = htmlText._getKey();\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    gpuText.generatingTexture = true;\n    gpuText.currentKey = newKey;\n    const resolution = htmlText.resolution ?? this._renderer.resolution;\n    const texture = await this._renderer.htmlText.getManagedTexture(\n      htmlText.text,\n      resolution,\n      htmlText._style,\n      htmlText._getKey()\n    );\n    const batchableSprite = gpuText.batchableSprite;\n    batchableSprite.texture = gpuText.texture = texture;\n    gpuText.generatingTexture = false;\n    gpuText.textureNeedsUploading = true;\n    htmlText.onViewUpdate();\n    updateTextBounds(batchableSprite, htmlText);\n  }\n  _getGpuText(htmlText) {\n    return this._gpuText[htmlText.uid] || this.initGpuText(htmlText);\n  }\n  initGpuText(htmlText) {\n    const gpuTextData = {\n      texture: Texture.EMPTY,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite),\n      textureNeedsUploading: false,\n      generatingTexture: false\n    };\n    const batchableSprite = gpuTextData.batchableSprite;\n    batchableSprite.renderable = htmlText;\n    batchableSprite.transform = htmlText.groupTransform;\n    batchableSprite.texture = Texture.EMPTY;\n    batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    batchableSprite.roundPixels = this._renderer._roundPixels | htmlText._roundPixels;\n    htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n    this._gpuText[htmlText.uid] = gpuTextData;\n    htmlText.on(\"destroyed\", this._destroyRenderableBound);\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nHTMLTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"htmlText\"\n};\n\nexport { HTMLTextPipe };\n//# sourceMappingURL=HTMLTextPipe.mjs.map\n","import { DOMAdapter } from '../../environment/adapter.mjs';\n\n\"use strict\";\nfunction isSafari() {\n  const { userAgent } = DOMAdapter.get().getNavigator();\n  return /^((?!chrome|android).)*safari/i.test(userAgent);\n}\n\nexport { isSafari };\n//# sourceMappingURL=isSafari.mjs.map\n","import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { Bounds } from '../../container/bounds/Bounds.mjs';\n\n\"use strict\";\nconst tempBounds = new Bounds();\nfunction getPo2TextureFromSource(image, width, height, resolution) {\n  const bounds = tempBounds;\n  bounds.minX = 0;\n  bounds.minY = 0;\n  bounds.maxX = image.width / resolution | 0;\n  bounds.maxY = image.height / resolution | 0;\n  const texture = TexturePool.getOptimalTexture(\n    bounds.width,\n    bounds.height,\n    resolution,\n    false\n  );\n  texture.source.uploadMethodId = \"image\";\n  texture.source.resource = image;\n  texture.source.alphaMode = \"premultiply-alpha-on-upload\";\n  texture.frame.width = width / resolution;\n  texture.frame.height = height / resolution;\n  texture.source.emit(\"update\", texture.source);\n  texture.updateUvs();\n  return texture;\n}\n\nexport { getPo2TextureFromSource };\n//# sourceMappingURL=getPo2TextureFromSource.mjs.map\n","\"use strict\";\nfunction extractFontFamilies(text, style) {\n  const fontFamily = style.fontFamily;\n  const fontFamilies = [];\n  const dedupe = {};\n  const regex = /font-family:([^;\"\\s]+)/g;\n  const matches = text.match(regex);\n  function addFontFamily(fontFamily2) {\n    if (!dedupe[fontFamily2]) {\n      fontFamilies.push(fontFamily2);\n      dedupe[fontFamily2] = true;\n    }\n  }\n  if (Array.isArray(fontFamily)) {\n    for (let i = 0; i < fontFamily.length; i++) {\n      addFontFamily(fontFamily[i]);\n    }\n  } else {\n    addFontFamily(fontFamily);\n  }\n  if (matches) {\n    matches.forEach((match) => {\n      const fontFamily2 = match.split(\":\")[1].trim();\n      addFontFamily(fontFamily2);\n    });\n  }\n  for (const i in style.tagStyles) {\n    const fontFamily2 = style.tagStyles[i].fontFamily;\n    addFontFamily(fontFamily2);\n  }\n  return fontFamilies;\n}\n\nexport { extractFontFamilies };\n//# sourceMappingURL=extractFontFamilies.mjs.map\n","import { DOMAdapter } from '../../../environment/adapter.mjs';\n\n\"use strict\";\nasync function loadFontAsBase64(url) {\n  const response = await DOMAdapter.get().fetch(url);\n  const blob = await response.blob();\n  const reader = new FileReader();\n  const dataSrc = await new Promise((resolve, reject) => {\n    reader.onloadend = () => resolve(reader.result);\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n  return dataSrc;\n}\n\nexport { loadFontAsBase64 };\n//# sourceMappingURL=loadFontAsBase64.mjs.map\n","import { loadFontAsBase64 } from './loadFontAsBase64.mjs';\n\n\"use strict\";\nasync function loadFontCSS(style, url) {\n  const dataSrc = await loadFontAsBase64(url);\n  return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        src: url('${dataSrc}');\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n    }`;\n}\n\nexport { loadFontCSS };\n//# sourceMappingURL=loadFontCSS.mjs.map\n","import { Cache } from '../../../assets/cache/Cache.mjs';\nimport { loadFontCSS } from './loadFontCSS.mjs';\n\n\"use strict\";\nconst FontStylePromiseCache = /* @__PURE__ */ new Map();\nasync function getFontCss(fontFamilies, style, defaultOptions) {\n  const fontPromises = fontFamilies.filter((fontFamily) => Cache.has(`${fontFamily}-and-url`)).map((fontFamily, i) => {\n    if (!FontStylePromiseCache.has(fontFamily)) {\n      const { url } = Cache.get(`${fontFamily}-and-url`);\n      if (i === 0) {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS({\n          fontWeight: style.fontWeight,\n          fontStyle: style.fontStyle,\n          fontFamily\n        }, url));\n      } else {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS({\n          fontWeight: defaultOptions.fontWeight,\n          fontStyle: defaultOptions.fontStyle,\n          fontFamily\n        }, url));\n      }\n    }\n    return FontStylePromiseCache.get(fontFamily);\n  });\n  return (await Promise.all(fontPromises)).join(\"\\n\");\n}\n\nexport { FontStylePromiseCache, getFontCss };\n//# sourceMappingURL=getFontCss.mjs.map\n","\"use strict\";\nfunction getSVGUrl(text, style, resolution, fontCSS, htmlTextData) {\n  const { domElement, styleElement, svgRoot } = htmlTextData;\n  domElement.innerHTML = `<style>${style.cssStyle}</style><div style='padding:0;'>${text}</div>`;\n  domElement.setAttribute(\"style\", `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n  styleElement.textContent = fontCSS;\n  const { width, height } = htmlTextData.image;\n  svgRoot.setAttribute(\"width\", width.toString());\n  svgRoot.setAttribute(\"height\", height.toString());\n  return new XMLSerializer().serializeToString(svgRoot);\n}\n\nexport { getSVGUrl };\n//# sourceMappingURL=getSVGUrl.mjs.map\n","import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\n\n\"use strict\";\nfunction getTemporaryCanvasFromImage(image, resolution) {\n  const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n    image.width,\n    image.height,\n    resolution\n  );\n  const { context } = canvasAndContext;\n  context.clearRect(0, 0, image.width, image.height);\n  context.drawImage(image, 0, 0);\n  return canvasAndContext;\n}\n\nexport { getTemporaryCanvasFromImage };\n//# sourceMappingURL=getTemporaryCanvasFromImage.mjs.map\n","\"use strict\";\nfunction loadSVGImage(image, url, delay) {\n  return new Promise(async (resolve) => {\n    if (delay) {\n      await new Promise((resolve2) => setTimeout(resolve2, 100));\n    }\n    image.onload = () => {\n      resolve();\n    };\n    image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n    image.crossOrigin = \"anonymous\";\n  });\n}\n\nexport { loadSVGImage };\n//# sourceMappingURL=loadSVGImage.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { isSafari } from '../../utils/browser/isSafari.mjs';\nimport { warn } from '../../utils/logging/warn.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource.mjs';\nimport { HTMLTextRenderData } from './HTMLTextRenderData.mjs';\nimport { HTMLTextStyle } from './HTMLTextStyle.mjs';\nimport { extractFontFamilies } from './utils/extractFontFamilies.mjs';\nimport { getFontCss } from './utils/getFontCss.mjs';\nimport { getSVGUrl } from './utils/getSVGUrl.mjs';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage.mjs';\nimport { loadSVGImage } from './utils/loadSVGImage.mjs';\nimport { measureHtmlText } from './utils/measureHtmlText.mjs';\n\n\"use strict\";\nclass HTMLTextSystem {\n  constructor(renderer) {\n    this._activeTextures = {};\n    this._renderer = renderer;\n    this._createCanvas = renderer.type === RendererType.WEBGPU;\n  }\n  getTexture(options) {\n    return this._buildTexturePromise(\n      options.text,\n      options.resolution,\n      options.style\n    );\n  }\n  getManagedTexture(text, resolution, style, textKey) {\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].promise;\n    }\n    const promise = this._buildTexturePromise(text, resolution, style).then((texture) => {\n      this._activeTextures[textKey].texture = texture;\n      return texture;\n    });\n    this._activeTextures[textKey] = {\n      texture: null,\n      promise,\n      usageCount: 1\n    };\n    return promise;\n  }\n  async _buildTexturePromise(text, resolution, style) {\n    const htmlTextData = BigPool.get(HTMLTextRenderData);\n    const fontFamilies = extractFontFamilies(text, style);\n    const fontCSS = await getFontCss(\n      fontFamilies,\n      style,\n      HTMLTextStyle.defaultTextStyle\n    );\n    const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const image = htmlTextData.image;\n    const uvSafeOffset = 2;\n    image.width = (width | 0) + uvSafeOffset;\n    image.height = (height | 0) + uvSafeOffset;\n    const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n    await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n    const resource = image;\n    let canvasAndContext;\n    if (this._createCanvas) {\n      canvasAndContext = getTemporaryCanvasFromImage(image, resolution);\n    }\n    const texture = getPo2TextureFromSource(\n      canvasAndContext ? canvasAndContext.canvas : resource,\n      image.width - uvSafeOffset,\n      image.height - uvSafeOffset,\n      resolution\n    );\n    if (this._createCanvas) {\n      this._renderer.texture.initSource(texture.source);\n      CanvasPool.returnCanvasAndContext(canvasAndContext);\n    }\n    BigPool.return(htmlTextData);\n    return texture;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    if (!activeTexture)\n      return;\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      if (activeTexture.texture) {\n        this._cleanUp(activeTexture);\n      } else {\n        activeTexture.promise.then((texture) => {\n          activeTexture.texture = texture;\n          this._cleanUp(activeTexture);\n        }).catch(() => {\n          warn(\"HTMLTextSystem: Failed to clean texture\");\n        });\n      }\n      this._activeTextures[textKey] = null;\n    }\n  }\n  _cleanUp(activeTexture) {\n    TexturePool.returnTexture(activeTexture.texture);\n    activeTexture.texture.source.resource = null;\n    activeTexture.texture.source.uploadMethodId = \"unknown\";\n  }\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey].usageCount;\n  }\n  destroy() {\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nHTMLTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"htmlText\"\n};\nHTMLTextSystem.defaultFontOptions = {\n  fontFamily: \"Arial\",\n  fontStyle: \"normal\",\n  fontWeight: \"normal\"\n};\n\nexport { HTMLTextSystem };\n//# sourceMappingURL=HTMLTextSystem.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../../sprite/BatchableSprite.mjs';\nimport { updateTextBounds } from '../utils/updateTextBounds.mjs';\n\n\"use strict\";\nclass CanvasTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.runners.resolutionChange.add(this);\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuText\");\n  }\n  resolutionChange() {\n    for (const i in this._gpuText) {\n      const gpuText = this._gpuText[i];\n      if (!gpuText)\n        continue;\n      const text = gpuText.batchableSprite.renderable;\n      if (text._autoResolution) {\n        text._resolution = this._renderer.resolution;\n        text.onViewUpdate();\n      }\n    }\n  }\n  validateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const newKey = text._getKey();\n    if (gpuText.currentKey !== newKey) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(text, instructionSet) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n  }\n  updateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    batchableSprite._batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(text) {\n    text.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableById(text.uid);\n  }\n  _destroyRenderableById(textUid) {\n    const gpuText = this._gpuText[textUid];\n    this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[textUid] = null;\n  }\n  _updateText(text) {\n    const newKey = text._getKey();\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(text);\n    }\n    text._didTextUpdate = false;\n    updateTextBounds(batchableSprite, text);\n  }\n  _updateGpuText(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.texture) {\n      this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    }\n    gpuText.texture = batchableSprite.texture = this._renderer.canvasText.getManagedTexture(text);\n    gpuText.currentKey = text._getKey();\n    batchableSprite.texture = gpuText.texture;\n  }\n  _getGpuText(text) {\n    return this._gpuText[text.uid] || this.initGpuText(text);\n  }\n  initGpuText(text) {\n    const gpuTextData = {\n      texture: null,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite)\n    };\n    gpuTextData.batchableSprite.renderable = text;\n    gpuTextData.batchableSprite.transform = text.groupTransform;\n    gpuTextData.batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    gpuTextData.batchableSprite.roundPixels = this._renderer._roundPixels | text._roundPixels;\n    this._gpuText[text.uid] = gpuTextData;\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    this._updateText(text);\n    text.on(\"destroyed\", this._destroyRenderableBound);\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nCanvasTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"text\"\n};\n\nexport { CanvasTextPipe };\n//# sourceMappingURL=CanvasTextPipe.mjs.map\n","import { Rectangle } from '../../maths/shapes/Rectangle.mjs';\n\n\"use strict\";\nfunction checkRow(data, width, y) {\n  for (let x = 0, index = 4 * y * width; x < width; ++x, index += 4) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction checkColumn(data, width, x, top, bottom) {\n  const stride = 4 * width;\n  for (let y = top, index = top * stride + 4 * x; y <= bottom; ++y, index += stride) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction getCanvasBoundingBox(canvas, resolution = 1) {\n  const { width, height } = canvas;\n  const context = canvas.getContext(\"2d\", {\n    willReadFrequently: true\n  });\n  if (context === null) {\n    throw new TypeError(\"Failed to get canvas 2D context\");\n  }\n  const imageData = context.getImageData(0, 0, width, height);\n  const data = imageData.data;\n  let left = 0;\n  let top = 0;\n  let right = width - 1;\n  let bottom = height - 1;\n  while (top < height && checkRow(data, width, top))\n    ++top;\n  if (top === height)\n    return Rectangle.EMPTY;\n  while (checkRow(data, width, bottom))\n    --bottom;\n  while (checkColumn(data, width, left, top, bottom))\n    ++left;\n  while (checkColumn(data, width, right, top, bottom))\n    --right;\n  ++right;\n  ++bottom;\n  return new Rectangle(left / resolution, top / resolution, (right - left) / resolution, (bottom - top) / resolution);\n}\n\nexport { getCanvasBoundingBox };\n//# sourceMappingURL=getCanvasBoundingBox.mjs.map\n","import { Color } from '../../../color/Color.mjs';\nimport { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { nextPow2 } from '../../../maths/misc/pow2.mjs';\nimport { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { getCanvasBoundingBox } from '../../../utils/canvas/getCanvasBoundingBox.mjs';\nimport { deprecation } from '../../../utils/logging/deprecation.mjs';\nimport { TextStyle } from '../TextStyle.mjs';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource.mjs';\nimport { CanvasTextMetrics } from './CanvasTextMetrics.mjs';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle.mjs';\nimport { getCanvasFillStyle } from './utils/getCanvasFillStyle.mjs';\n\n\"use strict\";\nclass CanvasTextSystem {\n  constructor(_renderer) {\n    this._activeTextures = {};\n    this._renderer = _renderer;\n  }\n  getTextureSize(text, resolution, style) {\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    let width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    let height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    width = Math.ceil(width - 1e-6);\n    height = Math.ceil(height - 1e-6);\n    width = nextPow2(width);\n    height = nextPow2(height);\n    return { width, height };\n  }\n  getTexture(options, resolution, style, _textKey) {\n    if (typeof options === \"string\") {\n      deprecation(\"8.0.0\", \"CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments\");\n      options = {\n        text: options,\n        style,\n        resolution\n      };\n    }\n    if (!(options.style instanceof TextStyle)) {\n      options.style = new TextStyle(options.style);\n    }\n    const { texture, canvasAndContext } = this.createTextureAndCanvas(\n      options\n    );\n    this._renderer.texture.initSource(texture._source);\n    CanvasPool.returnCanvasAndContext(canvasAndContext);\n    return texture;\n  }\n  createTextureAndCanvas(options) {\n    const { text, style } = options;\n    const resolution = options.resolution ?? this._renderer.resolution;\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(width, height);\n    const { canvas } = canvasAndContext;\n    this.renderTextToCanvas(text, style, resolution, canvasAndContext);\n    const texture = getPo2TextureFromSource(canvas, width, height, resolution);\n    if (style.trim) {\n      const trimmed = getCanvasBoundingBox(canvas, resolution);\n      texture.frame.copyFrom(trimmed);\n      texture.updateUvs();\n    }\n    return { texture, canvasAndContext };\n  }\n  getManagedTexture(text) {\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    const textKey = text._getKey();\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].texture;\n    }\n    const { texture, canvasAndContext } = this.createTextureAndCanvas(text);\n    this._activeTextures[textKey] = {\n      canvasAndContext,\n      texture,\n      usageCount: 1\n    };\n    return texture;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  /**\n   * Returns a texture that was created wit the above `getTexture` function.\n   * Handy if you are done with a texture and want to return it to the pool.\n   * @param texture - The texture to be returned.\n   */\n  returnTexture(texture) {\n    const source = texture.source;\n    source.resource = null;\n    source.uploadMethodId = \"unknown\";\n    source.alphaMode = \"no-premultiply-alpha\";\n    TexturePool.returnTexture(texture);\n  }\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      CanvasPool.returnCanvasAndContext(activeTexture.canvasAndContext);\n      this.returnTexture(activeTexture.texture);\n      this._activeTextures[textKey] = null;\n    }\n  }\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey].usageCount;\n  }\n  /**\n   * Renders text to its canvas, and updates its texture.\n   *\n   * By default this is used internally to ensure the texture is correct before rendering,\n   * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n   * and then shared across multiple Sprites.\n   * @param text\n   * @param style\n   * @param resolution\n   * @param canvasAndContext\n   */\n  renderTextToCanvas(text, style, resolution, canvasAndContext) {\n    const { canvas, context } = canvasAndContext;\n    const font = fontStringFromTextStyle(style);\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const lines = measured.lines;\n    const lineHeight = measured.lineHeight;\n    const lineWidths = measured.lineWidths;\n    const maxLineWidth = measured.maxLineWidth;\n    const fontProperties = measured.fontProperties;\n    const height = canvas.height;\n    context.resetTransform();\n    context.scale(resolution, resolution);\n    context.textBaseline = style.textBaseline;\n    if (style._stroke?.width) {\n      const strokeStyle = style._stroke;\n      context.lineWidth = strokeStyle.width;\n      context.miterLimit = strokeStyle.miterLimit;\n      context.lineJoin = strokeStyle.join;\n      context.lineCap = strokeStyle.cap;\n    }\n    context.font = font;\n    let linePositionX;\n    let linePositionY;\n    const passesCount = style.dropShadow ? 2 : 1;\n    for (let i = 0; i < passesCount; ++i) {\n      const isShadowPass = style.dropShadow && i === 0;\n      const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + style.padding * 2) : 0;\n      const dsOffsetShadow = dsOffsetText * resolution;\n      if (isShadowPass) {\n        context.fillStyle = \"black\";\n        context.strokeStyle = \"black\";\n        const shadowOptions = style.dropShadow;\n        const dropShadowColor = shadowOptions.color;\n        const dropShadowAlpha = shadowOptions.alpha;\n        context.shadowColor = Color.shared.setValue(dropShadowColor).setAlpha(dropShadowAlpha).toRgbaString();\n        const dropShadowBlur = shadowOptions.blur * resolution;\n        const dropShadowDistance = shadowOptions.distance * resolution;\n        context.shadowBlur = dropShadowBlur;\n        context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n        context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance + dsOffsetShadow;\n      } else {\n        context.fillStyle = style._fill ? getCanvasFillStyle(style._fill, context, measured) : null;\n        if (style._stroke?.width) {\n          const padding = style._stroke.width * style._stroke.alignment;\n          context.strokeStyle = getCanvasFillStyle(style._stroke, context, measured, padding);\n        }\n        context.shadowColor = \"black\";\n      }\n      let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n      if (lineHeight - fontProperties.fontSize < 0) {\n        linePositionYShift = 0;\n      }\n      const strokeWidth = style._stroke?.width ?? 0;\n      for (let i2 = 0; i2 < lines.length; i2++) {\n        linePositionX = strokeWidth / 2;\n        linePositionY = strokeWidth / 2 + i2 * lineHeight + fontProperties.ascent + linePositionYShift;\n        if (style.align === \"right\") {\n          linePositionX += maxLineWidth - lineWidths[i2];\n        } else if (style.align === \"center\") {\n          linePositionX += (maxLineWidth - lineWidths[i2]) / 2;\n        }\n        if (style._stroke?.width) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + style.padding,\n            linePositionY + style.padding - dsOffsetText,\n            true\n          );\n        }\n        if (style._fill !== void 0) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + style.padding,\n            linePositionY + style.padding - dsOffsetText\n          );\n        }\n      }\n    }\n  }\n  /**\n   * Render the text with letter-spacing.\n   * @param text - The text to draw\n   * @param style\n   * @param canvasAndContext\n   * @param x - Horizontal position to draw the text\n   * @param y - Vertical position to draw the text\n   * @param isStroke - Is this drawing for the outside stroke of the\n   *  text? If not, it's for the inside fill\n   */\n  _drawLetterSpacing(text, style, canvasAndContext, x, y, isStroke = false) {\n    const { context } = canvasAndContext;\n    const letterSpacing = style.letterSpacing;\n    let useExperimentalLetterSpacing = false;\n    if (CanvasTextMetrics.experimentalLetterSpacingSupported) {\n      if (CanvasTextMetrics.experimentalLetterSpacing) {\n        context.letterSpacing = `${letterSpacing}px`;\n        context.textLetterSpacing = `${letterSpacing}px`;\n        useExperimentalLetterSpacing = true;\n      } else {\n        context.letterSpacing = \"0px\";\n        context.textLetterSpacing = \"0px\";\n      }\n    }\n    if (letterSpacing === 0 || useExperimentalLetterSpacing) {\n      if (isStroke) {\n        context.strokeText(text, x, y);\n      } else {\n        context.fillText(text, x, y);\n      }\n      return;\n    }\n    let currentPosition = x;\n    const stringArray = CanvasTextMetrics.graphemeSegmenter(text);\n    let previousWidth = context.measureText(text).width;\n    let currentWidth = 0;\n    for (let i = 0; i < stringArray.length; ++i) {\n      const currentChar = stringArray[i];\n      if (isStroke) {\n        context.strokeText(currentChar, currentPosition, y);\n      } else {\n        context.fillText(currentChar, currentPosition, y);\n      }\n      let textStr = \"\";\n      for (let j = i + 1; j < stringArray.length; ++j) {\n        textStr += stringArray[j];\n      }\n      currentWidth = context.measureText(textStr).width;\n      currentPosition += previousWidth - currentWidth + letterSpacing;\n      previousWidth = currentWidth;\n    }\n  }\n  destroy() {\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nCanvasTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"canvasText\"\n};\n\nexport { CanvasTextSystem };\n//# sourceMappingURL=CanvasTextSystem.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { ResizePlugin } from './ResizePlugin.mjs';\nimport { TickerPlugin } from './TickerPlugin.mjs';\n\n\"use strict\";\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem.mjs';\nimport { GraphicsPipe } from './shared/GraphicsPipe.mjs';\n\n\"use strict\";\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { MeshPipe } from './shared/MeshPipe.mjs';\n\n\"use strict\";\nextensions.add(MeshPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { GlParticleContainerPipe } from './shared/GlParticleContainerPipe.mjs';\nimport { GpuParticleContainerPipe } from './shared/GpuParticleContainerPipe.mjs';\n\n\"use strict\";\nextensions.add(GlParticleContainerPipe);\nextensions.add(GpuParticleContainerPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe.mjs';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem.mjs';\n\n\"use strict\";\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { BitmapTextPipe } from './BitmapTextPipe.mjs';\n\n\"use strict\";\nextensions.add(BitmapTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { HTMLTextPipe } from './HTMLTextPipe.mjs';\nimport { HTMLTextSystem } from './HTMLTextSystem.mjs';\n\n\"use strict\";\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { TilingSpritePipe } from './TilingSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(TilingSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(NineSliceSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { FilterPipe } from './FilterPipe.mjs';\nimport { FilterSystem } from './FilterSystem.mjs';\n\n\"use strict\";\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n//# sourceMappingURL=init.mjs.map\n"],"names":["ResizePlugin","options","dom","width","height","clientWidth","clientHeight","ExtensionType","TickerPlugin","ticker","UPDATE_PRIORITY","Ticker","oldTicker","AbstractBitmapFont","EventEmitter","deprecation","v8_0_0","destroyTextures","i","page","PRECISION","getCanvasFillStyle","fillStyle","context","textMetrics","padding","Texture","Color","FillPattern","fillPattern","pattern","tempMatrix","Matrix","FillGradient","fillGradient","isLinear","isLocal","gradient","isNearlyVertical","start","end","center","innerRadius","outerCenter","outerRadius","ratio","stop","globalStop","warn","resolveCharacters","chars","result","j","item","startCode","endCode","i2","j2","_DynamicBitmapFont","dynamicOptions","style","requestedFontSize","font","fontStringFromTextStyle","CanvasTextMetrics","charList","char","index","self","pageData","canvas","textureSource","currentX","currentY","fontScale","maxCharHeight","skipTexture","maxTextureWidth","maxTextureHeight","metrics","textureGlyphWidth","paddedWidth","paddedHeight","pageData2","xAdvance","px","py","frame","Rectangle","newChars","measureCache","first","second","c1","c2","total","amount","textureResolution","canvasAndContext","CanvasPool","resolution","texture","ImageSource","stroke","strokeThickness","shadowOptions","rgb","dropShadowBlur","dropShadowDistance","x","y","fontProperties","tx","ty","descent","lineHeight","TextStyle","DynamicBitmapFont","getBitmapTextLayout","trimEnd","layoutData","currentLine","previousChar","firstWord","currentWord","nextWord","word","position","nextLine","lastChar","scale","adjustedLetterSpacing","adjustedWordWrapWidth","isEnd","charData","spaceWidth","kerning","nextCharWidth","alignCenter","alignRight","alignJustify","measurementData","line","offset","indy","spaceIndex","totalSpaces","fontCount","BitmapFontManagerClass","text","fontFamilyKey","overrideFill","key","Cache","fnt","dynamicFont","bitmapFont","args","name","textStyle","flatChars","cacheKey","BitmapFontManager","FilterPipe","renderer","filterEffect","container","instructionSet","_filterEffect","_container","instruction","getGlobalRenderableBounds","renderables","bounds","renderable","quadGeometry","Geometry","FilterSystem","UniformGroup","BindGroup","filters","filterData","filterFrameTransform","colorTextureSource","antialias","blendRequired","enabled","clipToViewport","filter","viewPort","rootResolution","TexturePool","inputTexture","backTexture","previousBounds","renderTarget","flip","flop","t","lastRenderSurface","backgroundResolution","input","output","clear","Point","isFinalTarget","currentIndex","filterUniforms","uniforms","outputFrame","inputSize","inputPixel","inputClamp","globalFrame","outputTexture","lastIndex","filterData2","rootTexture","batchUniforms","RendererType","Bounds","outputMatrix","sprite","data","mappedMatrix","worldTransform","renderGroup","_MeshGeometry","positions","uvs","indices","shrinkToFit","positionBuffer","Buffer","BufferUsage","uvBuffer","indexBuffer","value","MeshGeometry","textStyleToCSS","fill","cssStyles","strokeToCSS","dropShadowToCSS","tagStyleToCSS","dropShadowStyle","color","templates","transform","tagStyles","out","tagStyle","cssTagStyle","HTMLTextStyle","generateTextStyleKey","toAdd","v","toRemove","nssvg","nsxhtml","HTMLTextRenderData","foreignObject","svgRoot","styleElement","domElement","tempHTMLTextRenderData","measureHtmlText","fontStyleCSS","htmlTextRenderData","contentBounds","doublePadding","GraphicsPipe","adaptor","State","graphics","wasBatched","gpuContext","batches","batch","shader","localUniforms","color32BitToUniform","batchPipe","roundPixels","batchClone","BigPool","BatchableGraphics","graphicsUid","_PlaneGeometry","verts","verticesX","verticesY","sizeX","sizeY","totalSub","xpos","ypos","value2","value3","value4","PlaneGeometry","BatchableMesh","transformedUvs","textureMatrix","MeshPipe","mesh","meshData","isBatched","geometry","batchableMesh","batcher","batched","gpuBatchableMesh","gpuMesh","getAdjustedBlendModeBlend","GlParticleContainerAdaptor","particleContainerPipe","state","gl","buffer","glType","GpuParticleContainerAdaptor","createIndicesForQuads","size","outBuffer","totalIndices","generateParticleUpdateFunction","properties","generateUpdateFunction","dynamic","funcFragments","property","attributeInfo","getAttributeInfoFromFormat","functionSource","ParticleBuffer","staticVertexSize","dynamicVertexSize","ViewableBuffer","dynamicOffset","staticOffset","uploadFunction","getParticleSyncKey","particles","uploadStatic","dynamicAttributeBuffer","staticAttributeBuffer","keyGen","fragment","vertex","wgsl","ParticleShader","Shader","glProgram","GlProgram","gpuProgram","GpuProgram","TextureStyle","ParticleContainerPipe","_renderable","children","transformationMatrix","GlParticleContainerPipe","GpuParticleContainerPipe","_NineSliceGeometry","p","_leftWidth","_rightWidth","_topHeight","_bottomHeight","_anchorX","_anchorY","w","scaleW","h","scaleH","anchorOffsetX","anchorOffsetY","_uvw","_uvh","NineSliceGeometry","NineSliceSpritePipe","gpuSprite","batchableSprite","tilingBit","tilingBitGl","TilingSpriteShader","compileHighShaderGpuProgram","localUniformBit","roundPixelsBit","compileHighShaderGlProgram","localUniformBitGl","roundPixelsBitGl","tilingUniforms","matrix","anchorX","anchorY","textureWidth","textureHeight","uTextureTransform","QuadGeometry","setPositions","tilingSprite","applyMatrix","array","stride","a","b","c","d","setUvs","sharedQuad","TilingSpritePipe","tilingSpriteData","couldBatch","canBatch","renderableData","_nonPowOf2wrapping","localUniformMSDFBit","localUniformMSDFBitGl","mSDFBit","mSDFBitGl","SdfShader","maxTextures","getMaxTexturesPerBatch","colorBit","generateTextureBatchBit","colorBitGl","generateTextureBatchBitGl","getBatchSamplersUniformGroup","BitmapTextPipe","bitmapText","graphicsRenderable","syncWithProxy","renderableUid","proxyGraphics","bitmapTextLayout","tint","proxyRenderable","Graphics","fontFamily","dx","dy","worldScale","distance","uid","proxy","updateTextBounds","updateQuadBounds","HTMLTextPipe","gpuText","htmlText","newKey","htmlTextUid","e","gpuTextData","BatchableSprite","isSafari","userAgent","DOMAdapter","tempBounds","getPo2TextureFromSource","image","extractFontFamilies","fontFamilies","dedupe","regex","matches","addFontFamily","fontFamily2","match","loadFontAsBase64","url","blob","reader","resolve","reject","loadFontCSS","dataSrc","FontStylePromiseCache","getFontCss","defaultOptions","fontPromises","getSVGUrl","fontCSS","htmlTextData","getTemporaryCanvasFromImage","loadSVGImage","delay","resolve2","HTMLTextSystem","textKey","promise","measured","uvSafeOffset","svgURL","resource","activeTexture","CanvasTextPipe","textUid","checkRow","checkColumn","top","bottom","getCanvasBoundingBox","left","right","CanvasTextSystem","_renderer","nextPow2","_textKey","trimmed","source","lines","lineWidths","maxLineWidth","strokeStyle","linePositionX","linePositionY","passesCount","isShadowPass","dsOffsetText","dsOffsetShadow","dropShadowColor","dropShadowAlpha","linePositionYShift","strokeWidth","isStroke","letterSpacing","useExperimentalLetterSpacing","currentPosition","stringArray","previousWidth","currentWidth","currentChar","textStr","extensions","GraphicsContextSystem"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69]}