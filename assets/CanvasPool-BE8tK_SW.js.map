{"version":3,"file":"CanvasPool-BE8tK_SW.js","sources":["../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/CanvasPool.mjs"],"sourcesContent":["import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { nextPow2 } from '../../../../maths/misc/pow2.mjs';\n\n\"use strict\";\nclass CanvasPoolClass {\n  constructor(canvasOptions) {\n    this._canvasPool = /* @__PURE__ */ Object.create(null);\n    this.canvasOptions = canvasOptions || {};\n    this.enableFullScreen = false;\n  }\n  /**\n   * Creates texture with params that were specified in pool constructor.\n   * @param pixelWidth - Width of texture in pixels.\n   * @param pixelHeight - Height of texture in pixels.\n   */\n  _createCanvasAndContext(pixelWidth, pixelHeight) {\n    const canvas = DOMAdapter.get().createCanvas();\n    canvas.width = pixelWidth;\n    canvas.height = pixelHeight;\n    const context = canvas.getContext(\"2d\");\n    return { canvas, context };\n  }\n  /**\n   * Gets a Power-of-Two render texture or fullScreen texture\n   * @param minWidth - The minimum width of the render texture.\n   * @param minHeight - The minimum height of the render texture.\n   * @param resolution - The resolution of the render texture.\n   * @returns The new render texture.\n   */\n  getOptimalCanvasAndContext(minWidth, minHeight, resolution = 1) {\n    minWidth = Math.ceil(minWidth * resolution - 1e-6);\n    minHeight = Math.ceil(minHeight * resolution - 1e-6);\n    minWidth = nextPow2(minWidth);\n    minHeight = nextPow2(minHeight);\n    const key = (minWidth << 17) + (minHeight << 1);\n    if (!this._canvasPool[key]) {\n      this._canvasPool[key] = [];\n    }\n    let canvasAndContext = this._canvasPool[key].pop();\n    if (!canvasAndContext) {\n      canvasAndContext = this._createCanvasAndContext(minWidth, minHeight);\n    }\n    return canvasAndContext;\n  }\n  /**\n   * Place a render texture back into the pool.\n   * @param canvasAndContext\n   */\n  returnCanvasAndContext(canvasAndContext) {\n    const canvas = canvasAndContext.canvas;\n    const { width, height } = canvas;\n    const key = (width << 17) + (height << 1);\n    canvasAndContext.context.clearRect(0, 0, width, height);\n    this._canvasPool[key].push(canvasAndContext);\n  }\n  clear() {\n    this._canvasPool = {};\n  }\n}\nconst CanvasPool = new CanvasPoolClass();\n\nexport { CanvasPool, CanvasPoolClass };\n//# sourceMappingURL=CanvasPool.mjs.map\n"],"names":["CanvasPoolClass","canvasOptions","pixelWidth","pixelHeight","canvas","DOMAdapter","context","minWidth","minHeight","resolution","nextPow2","key","canvasAndContext","width","height","CanvasPool"],"mappings":"+CAIA,MAAMA,CAAgB,CACpB,YAAYC,EAAe,CACzB,KAAK,YAA8B,OAAO,OAAO,IAAI,EACrD,KAAK,cAAgBA,GAAiB,CAAE,EACxC,KAAK,iBAAmB,EAC5B,CAME,wBAAwBC,EAAYC,EAAa,CAC/C,MAAMC,EAASC,EAAW,IAAG,EAAG,aAAc,EAC9CD,EAAO,MAAQF,EACfE,EAAO,OAASD,EAChB,MAAMG,EAAUF,EAAO,WAAW,IAAI,EACtC,MAAO,CAAE,OAAAA,EAAQ,QAAAE,CAAS,CAC9B,CAQE,2BAA2BC,EAAUC,EAAWC,EAAa,EAAG,CAC9DF,EAAW,KAAK,KAAKA,EAAWE,EAAa,IAAI,EACjDD,EAAY,KAAK,KAAKA,EAAYC,EAAa,IAAI,EACnDF,EAAWG,EAASH,CAAQ,EAC5BC,EAAYE,EAASF,CAAS,EAC9B,MAAMG,GAAOJ,GAAY,KAAOC,GAAa,GACxC,KAAK,YAAYG,CAAG,IACvB,KAAK,YAAYA,CAAG,EAAI,CAAE,GAE5B,IAAIC,EAAmB,KAAK,YAAYD,CAAG,EAAE,IAAK,EAClD,OAAKC,IACHA,EAAmB,KAAK,wBAAwBL,EAAUC,CAAS,GAE9DI,CACX,CAKE,uBAAuBA,EAAkB,CACvC,MAAMR,EAASQ,EAAiB,OAC1B,CAAE,MAAAC,EAAO,OAAAC,CAAM,EAAKV,EACpBO,GAAOE,GAAS,KAAOC,GAAU,GACvCF,EAAiB,QAAQ,UAAU,EAAG,EAAGC,EAAOC,CAAM,EACtD,KAAK,YAAYH,CAAG,EAAE,KAAKC,CAAgB,CAC/C,CACE,OAAQ,CACN,KAAK,YAAc,CAAE,CACzB,CACA,CACK,MAACG,EAAa,IAAIf","x_google_ignoreList":[0]}